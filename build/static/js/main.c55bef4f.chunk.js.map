{"version":3,"sources":["constants.ts","reducers/canvasReducer.tsx","reducers/configurationReducer.tsx","components/Transformations.tsx","transformations/scale_x.tsx","transformations/scale_y.tsx","transformations/circle.tsx","reducers/transformationReducer.tsx","reducers/rootReducer.tsx","reducers/matrixReducer.tsx","store.tsx","survey/uri.ts","survey/loadStyle.ts","survey/sendSurvey.ts","survey/settings.ts","styling/theme.tsx","styling/default.tsx","components/Sketch.tsx","survey/helpers.ts","actions/configuration.tsx","actions/data.tsx","components/Average.tsx","components/Canvas.tsx","components/Matrix.tsx","components/Configuration.tsx","components/Menu.tsx","components/Module.tsx","components/Shape.tsx","components/Segment.tsx","components/SketchChild.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ROW","X","Y","map","coordinate","SET_X","SET_Y","DELAY","M","N","dim","SET_M","SET_N","DATA_FORMAT","NUM_SEGMENTS","action","MOVE_TO","defaultState","undefined","TRANSFORMATION_PRESETS","id","transformation","args","points","scale_x","point","index","x","Math","floor","y","type","scale_y","index_distance","length","startPoint","endPoint","midPoint","distance","sqrt","pow","radius","Transformations","reducers","combineReducers","canvas","state","numPoints","numSegments","isSegmentBased","sliceStart","sliceEnd","aggregatePoints","slice","timestamp","timestamps","aggregateTimestamps","configuration","matrix","configureStore","initialState","createStore","rootReducer","applyMiddleware","thunk","apiServer","baseServer","uid","a","latent","i","val","random","push","fetch","method","headers","body","JSON","stringify","userId","latentVec","sequence","test","dateTime","Date","toUTCString","PARAMETERS_GROUP","strength","sampleInterval","theme","black","blue","lightgray","grey","defaultFontProps","fontFamily","fontSize","BLACK","GRAY","eraseCanvas","canvasRef","current","context","getContext","clearRect","width","height","TASKS","array","j","temp","shuffleArray","PROMPTS","1","2","3","SECTION_PARAMETERS","Sketch","connect","connector","useState","isPainting","setIsPainting","erase","setErase","setStrength","dt","getTime","replace","c","r","toString","generateUID","styleData","setStyleData","styleIndex","setStyleIndex","setSampleInterval","reloadStyle","setReloadStyle","cursorStyle","setCursorStyle","section","setSection","lastMousePosition","setLastMousePosition","showConfirm","setShowConfirm","showEnding","setShowEnding","submission","setSubmission","setSequence","copied","useRef","direction","lastStroke","strokeDirection","remainingDist","curve","setCurve","eraseSurveyCanvas","_","ACTIONS","text","fx","tryChangeSection","useEffect","uploadResults","console","log","sendSketch","getRandomStyle","then","res","json","styles","dx","dy","z_0","z_1","z_2","split","forEach","element","parseFloat","onMouseDown","useCallback","event","coordinates","getCoordinates","newCurve","pos","applyStyle","beginPath","moveTo","now","t","onMouseMove","dir","getDir","dist","getDistance","totalDist","newIndex","ratio","normalize","lerpVector","newPos","lineTo","stroke","onMouseUp","closePath","onMouseLeave","Object","assign","lineJoin","lineWidth","strokeStyle","addEventListener","removeEventListener","pageX","offsetLeft","pageY","offsetTop","sx","sy","bitang","b","d2","len2","len","from","to","menuStyles","borderColor","borderStyle","borderWidth","background","color","cursor","transition","display","style","position","left","top","transform","margin","bg","onClick","newSubmission","parse","submit","key","mb","mr","textAlign","backgroundColor","ref","border","borderRadius","setM","value","setN","setX","setY","setDelay","setAmplitude","setFrequency","setDataFormat","setSegments","segments","iterations","iterationsArray","Array","mousePosition","originalMousePosition","dispatch","useDispatch","xAverage","useSelector","yAverage","drawAverage","marginLeft","scalingFactor","waveStyle","delay","amplitude","frequency","draw","tfx","xOriginal","yOriginal","wave","sin","cos","xMoveTo","yMoveTo","xLineTo","yLineTo","setTimeout","drawLine","marginRight","Matrix","ANCHOR_POINT_CONFIG","DEFAULT_CONFIG_OPTIONS","ml","defaultVisibility","heading","flexDirection","justifyContent","py","alignItems","anchor","htmlFor","name","min","onChange","e","parseInt","target","mx","alignSelf","pb","config","MATRIX_CONFIG","mt","Module","children","isVisible","setIsVisible","borderBottomStyle","borderBottomColor","borderBottomWidth","px","icon","className","transformations","reduce","acc","filter","arc","PI","lines","idx","params","library","add","faAngleDown","faAngleUp","faArrowLeft","faArrowRight","faArrowsAlt","faCircle","faEllipsisH","faExpandAlt","faRedo","faSlash","faSquare","faTimes","letterSpacing","Boolean","window","location","hostname","match","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+QAGaA,EAAM,MAwBNC,EAAI,IACJC,EAAI,I,EACQ,CAACD,EAAGC,GACWC,IAAI,SAAAC,GAAU,oBAAWA,K,mBAAnDC,E,KAAOC,E,KAKRC,EAAQ,kBAIRC,EAAI,IACJC,EAAI,I,EACS,CAACD,EAAGC,GACWN,IAAI,SAAAO,GAAG,oBAAWA,K,mBAA7CC,E,KAAOC,E,KAERC,EAAc,mCAqBdC,EAAe,qB,EAsBsB,CAAC,MAAO,SAAU,QAAQX,IAC1E,SAAAY,GAAM,gBAAOA,EAAP,W,mBAGKC,G,eAAU,W,mjBClEvB,IAAMC,GAAmB,mBD4CA,iBC3CVC,GADU,cD6CA,iBC3CVA,GAFU,cD8BC,mBC3BV,GAHS,cAItBJ,EAAe,GAJO,cD6BH,SCxBV,IALa,cDmCC,aC7BV,IANS,G,smCCLlB,I,OCNMK,EAAyB,CCXC,CACrCC,GJ6FqB,UI5FrBC,eAAgB,YAAe,IAAZC,EAAW,EAAXA,KAAW,EAIxBA,EAFFC,cAF0B,MAEjB,GAFiB,IAIxBD,EADFE,eAH0B,MAGhB,EAHgB,EAM5B,OAAOD,EAAOpB,IAAI,SAACsB,EAAOC,GAAR,MAAmB,CACnCC,EAAGC,KAAKC,MAAMJ,EAAME,EAAIH,GACxBM,EAAGL,EAAMK,EACTC,KAAgB,IAAVL,EAAcV,EJ8EH,eKzFgB,CACrCI,GL8FqB,UK7FrBC,eAAgB,YAAe,IAAZC,EAAW,EAAXA,KAAW,EAIxBA,EAFFC,cAF0B,MAEjB,GAFiB,IAIxBD,EADFU,eAH0B,MAGhB,EAHgB,EAM5B,OAAOT,EAAOpB,IAAI,SAACsB,EAAOC,GAAR,MAAmB,CACnCC,EAAGF,EAAME,EACTG,EAAGF,KAAKC,MAAMJ,EAAMK,EAAIE,GACxBD,KAAgB,IAAVL,EAAcV,EL8EH,eMzFe,CACpCI,GN4FoB,SM3FpBC,eAAgB,YAAe,IAAZC,EAAW,EAAXA,KAAW,EAIxBA,EAFFW,sBAF0B,MAET,EAFS,IAIxBX,EADFC,cAH0B,MAGjB,GAHiB,EAQ5B,GAFkBA,EAAOW,OAET,EAAG,CACjB,IAAMC,EAAaZ,EAAO,GACpBa,EAAWb,EAAO,GAClBc,EAAW,CACfV,GAAIS,EAAST,EAAIQ,EAAWR,GAAK,EACjCG,GAAIM,EAASN,EAAIK,EAAWL,GAAK,GAG7BQ,EAAWV,KAAKW,KAAKX,KAAKY,IAAIJ,EAAST,EAAIQ,EAAWR,EAAG,GAAKC,KAAKY,IAAIJ,EAASN,EAAIK,EAAWL,EAAG,IAAMG,EAE9G,MAAO,CACL,CACEN,EAAGU,EAASV,EACZG,EAAGO,EAASP,EACZC,KAAMf,GACL,CACDW,EAAGU,EAASV,EACZG,EAAGO,EAASP,EACZW,OAAQH,EACRP,KN+DS,QM1Df,MAAO,MHbEW,EAAmC,WAC9C,OAAO,kBAAC,IAAD,O,mjBIVF,ICAQC,EATEC,YAAgB,CAC/BC,OP2BoB,WAA6D,IAAD,EAA5CC,EAA4C,uDAApC7B,EAAcF,EAAsB,uCAE1EQ,EAASuB,EAAK,OACdC,EAAYxB,EAAOW,OAEnBc,EAAcF,EAAMhC,GACpBmC,EAAiC,IAAhBD,EACjBE,EAAaH,EAAYC,EACzBG,EAAWJ,EAAY,EAE7B,OAAQhC,EAAOgB,MACb,IDWqB,YCVnB,IAAMN,EAAoBV,EAAM,MAqB1BqC,EAAe,sBAAO7B,GAAP,CAAeE,IAEpC,OAAO,EAAP,GACKqB,GADL,mBDfgB,SC0BJG,GAAkBF,EAAYC,EACpCI,EAAgBC,MAAMH,EAAYC,GAClCC,GAbN,cDdoB,mBC+BJL,GAjBhB,IAmBF,ID3ByB,gBC4BvB,IAAMO,EAAkBvC,EAAM,UACxBwC,EAAaT,EAAK,WAClBU,EAAmB,sBAAOD,GAAP,CAAmBD,IAE5C,OAAO,EAAP,GACKR,EADL,eDjCoB,aCmCJG,EACVO,EAAoBH,MAAMH,EAAYC,GACtCK,IAER,IDhDsB,aCiDpB,OAAOvC,EACT,QACE,OAAO6B,IO9FXW,cNY2B,WAUD,IAAD,EATzBX,EASyB,2EF4EF,YEpFR,IAQU,cAPtBjC,EAAc,GAOQ,cANtBN,EAAQ,GAMc,cF6EF,YElFR,IAKU,cFEF,QENR,GAIU,cAHtBO,EAAe,GAGO,cAFtBb,EAAI,GAEkB,cADtBC,EAAI,GACkB,GAAtBa,EAAsB,uCACzB,OAAQA,EAAOgB,MACb,IFIqB,YEHnB,OAAO,KACFe,EADL,eAEGvC,EAAQQ,EAAOR,KAEpB,IFQ2B,kBEPzB,OAAO,KACFuC,EADL,eAEGjC,EAAcE,EAAOF,KAE1B,IFTyB,gBEUvB,OAAO,KACFiC,EADL,eFXmB,QEaJ/B,EAAM,QAEvB,IFoB4B,iBEnB1B,OAAO,KACF+B,EADL,eAEGhC,EAAeC,EAAOD,KAE3B,KAAKT,EACH,OAAO,KACFyC,EADL,eAEG7C,EAAIc,EAAM,IAEf,KAAKT,EACH,OAAO,KACFwC,EADL,eAEG5C,EAAIa,EAAM,IAEf,IF8CyB,gBE7CvB,OAAO,KACF+B,EADL,eF2CmB,YEzCJ/B,EAAM,YAEvB,IF0CyB,gBEzCvB,OAAO,KACF+B,EADL,eFuCmB,YErCJ/B,EAAM,YAEvB,QACE,OAAO+B,IMhEXY,OCFoB,WAGI,IAAD,EAHiBZ,EAGjB,2EAFtBtC,EAAI,GAEkB,cADtBC,EAAI,GACkB,GAAtBM,EAAsB,uCACvB,OAAQA,EAAOgB,MACb,KAAKpB,EACH,OAAO,KACFmC,EADL,eAEGtC,EAAIO,EAAM,IAEf,KAAKH,EACH,OAAO,KACFkC,EADL,eAEGrC,EAAIM,EAAM,IAEf,QACE,OAAO+B,IDbXzB,eDK4B,WAGJ,IAAD,EAHyByB,EAGzB,2EPkED,WOpEV,IAEW,cP2DM,kBO5DV3B,GACI,GAAtBJ,EAAsB,uCACvB,OAAQA,EAAOgB,MACb,IP+D2B,kBO1D3B,IPqD8B,qBOpD5B,OAAO,KACFe,EADL,ePwDqB,cOtDJ/B,EPsDI,iBOpDvB,IPuDwB,eOtDtB,OAAO,KACF+B,EADL,ePqDkB,WOnDJ/B,EAAM,WActB,QACE,OAAO+B,MGrCEa,EAPQ,eAACC,EAAD,uDAAgB,GAAhB,OACrBC,YACEC,EACAF,EACAG,YAAgBC,O,qECPdC,EAAYC,kD,2CCCX,WAA8BC,GAA9B,mBAAAC,EAAA,qDAEN,IADMC,EAAS,GACNC,EAAI,EAAGA,EAAI,IAAKA,EACjBC,EAAsB,EAAhB3C,KAAK4C,SAAe,IAChCH,EAAOI,KAAKF,GAJR,yBAMCG,MAAMT,EAAY,WAAY,CAClCU,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,OAAQb,EACRc,UAAWZ,OAbV,0C,mECmCA,WAA0BF,EAAce,GAAxC,2BAAAd,EAAA,4DAA2De,EAA3D,kDACET,MAAMT,EAAY,eAAgB,CACvCU,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,OAAQb,EACRe,SAAUA,EACVE,UAAU,IAAIC,MAAOC,cACrBH,KAAMA,OAVL,0C,sBCrCA,IAEMI,GAAmB,CAC5B,QAAW,CACPC,SAAU,EACVC,eAAgB,GAEpB,KAAQ,CACJD,SAAU,EACVC,eAAgB,KAEpB,OAAU,CACND,SAAU,EACVC,eAAgB,ICbXC,GAGH,CACNC,MAAO,OACPC,KAAM,OACNC,UAAW,UACXC,KAAM,CACJ,SCNOC,GAAmB,CAC5BC,WAAY,aACZC,SAAU,GAGDC,GAAQR,GAAaC,MACrBQ,GAAOT,GAAaI,KAAK,G,SC2CzBM,GAAc,SAACC,GAC1B,GAAKA,GAAcA,EAAUC,QAA7B,CAGA,IAAMzD,EAA4BwD,EAAUC,QACtCC,EAAU1D,EAAO2D,WAAW,MAE5BD,GACJA,EAAQE,UAAU,EAAG,EAAG5D,EAAO6D,MAAO7D,EAAO8D,UAejD,IAAMC,GAXN,SAAsBC,GAEpB,IAAK,IAAIvC,GADTuC,EAAQA,EAAMxD,SACKnB,OAAS,EAAGoC,EAAI,EAAGA,IAAK,CACvC,IAAIwC,EAAIlF,KAAKC,MAAMD,KAAK4C,UAAYF,EAAI,IACpCyC,EAAOF,EAAMvC,GACjBuC,EAAMvC,GAAKuC,EAAMC,GACjBD,EAAMC,GAAKC,EAEf,OAAOF,EAGKG,CH1Ee,CAAC,WAAY,SAAU,UAAW,UAAW,YG0EhC3D,MAAM,EAAG,GAC7C4D,GAAU,CACdC,EAAG,eAAiBN,GAAM,GAC1BO,EAAG,eAAiBP,GAAM,GAC1BQ,EAAG,eAAiBR,GAAM,IAEtBS,GAAqB,CACzBH,EAAG,UACHC,EAAG,OACHC,EAAG,UAofQE,GAFKC,YAJD,SAACzE,GAAD,OAAkBA,GAEf,GAIE0E,CAjfQ,SAAC,GAGxB,IAFLd,EAEI,EAFJA,MACAC,EACI,EADJA,OACI,EACgCc,oBAAS,GADzC,mBACGC,EADH,KACeC,EADf,OAEsBF,oBAAS,GAF/B,mBAEGG,EAFH,KAEUC,EAFV,OAG4BJ,mBAAS,GAHrC,mBAGGjC,EAHH,KAGasC,EAHb,OAIwBL,mBC3FvB,WACL,IAAIM,GAAK,IAAI1C,MAAO2C,UAMpB,MALW,oBAAoBC,QAAQ,QAAS,SAASC,GACrD,IAAIC,GAAKJ,EAAmB,GAAdnG,KAAK4C,UAAa,GAAK,EAErC,OADAuD,EAAKnG,KAAKC,MAAMkG,EAAG,KACR,KAAHG,EAASC,EAAM,EAAFA,EAAM,GAAMC,SAAS,MDsFTC,IAJjC,mBAIGrD,EAJH,aAK8ByC,sBAL9B,mBAKGa,EALH,KAKcC,EALd,OAMgCd,mBAAS,GANzC,mBAMGe,EANH,KAMeC,EANf,OAOwChB,mBAAS,GAPjD,mBAOGhC,EAPH,KAOmBiD,EAPnB,OAQkCjB,oBAAS,GAR3C,mBAQGkB,EARH,KAQgBC,EARhB,OASkCnB,mBAAS,QAT3C,mBASGoB,EATH,KASgBC,EAThB,OAU0BrB,mBAAiB,GAV3C,mBAUGsB,EAVH,KAUYC,EAVZ,OAW8CvB,wBAAiCvG,GAX/E,mBAWG+H,EAXH,KAWsBC,EAXtB,OAYkCzB,oBAAS,GAZ3C,mBAYG0B,GAZH,KAYgBC,GAZhB,QAagC3B,oBAAS,GAbzC,qBAaG4B,GAbH,MAaeC,GAbf,SAcgC7B,mBAAc,CAChDP,GAAG,EACHC,GAAG,EACHC,GAAG,IAjBD,qBAcGmC,GAdH,MAceC,GAdf,SAmB4B/B,mBAAS,IAnBrC,qBAmBGvC,GAnBH,MAmBauE,GAnBb,SAoBwBhC,oBAAS,GApBjC,qBAoBGiC,GApBH,MAsBErD,IAtBF,MAsBcsD,iBAA0B,OAtBxC,GAwBsBlC,mBAAS,CACjCmC,UAAW,CAACjI,EAAE,EAAGG,EAAE,GACnB+H,WAAY,CAAClI,EAAE,EAAGG,EAAE,GACpBgI,gBAAiB,CAACnI,EAAE,EAAGG,EAAE,GACzBiI,cAAe,IA5Bb,qBAwBGC,GAxBH,MAwBUC,GAxBV,MA+BEC,GAAoB,SAAC7D,GACzB,GAAKA,GAAcA,EAAUC,QAA7B,CAGA,IAAMzD,EAA4BwD,EAAUC,QACtCC,EAAU1D,EAAO2D,WAAW,MAE5BD,GACJA,EAAQE,UAAU,EAAG,EAAG5D,EAAO6D,MAAO7D,EAAO8D,QAG/C8C,GAAY,SAAAU,GAAC,MAAI,OAGbC,GAAU,CACd,CACEhJ,GAAI,EACJiJ,KAAM,YACNC,GAAI,WAAQC,GAAiB,KAE/B,CACEnJ,GAAI,EACJiJ,KAAM,YACNC,GAAI,WAAQC,GAAiB,KAE/B,CACEnJ,GAAI,EACJiJ,KAAM,YACNC,GAAI,WAAQC,GAAiB,MAIjCC,oBAAU,WACR,GAAIzB,EAAU,EAIZ,OAHAK,IAAe,GACfE,IAAc,QACdmB,KAGF3C,EAAYvC,GAAiB8B,GAAmB0B,IAAUvD,UAC1DkD,EAAkBnD,GAAiB8B,GAAmB0B,IAAUtD,iBAC/D,CAACsD,IAEJyB,oBAAU,WACRN,GAAkB7D,IAClBwB,GAAS,IACR,CAACD,IAEJ,IAAM2C,GAAmB,SAACjG,GACpBA,IAAMyE,IACLQ,GAAWjF,IACd8E,IAAe,KAIbqB,GAAgB,WACpBC,QAAQC,IAAI,qBACZD,QAAQC,IAAIpB,IJ5IT,SAAP,8BI6IIqB,CAAW5F,EAAQF,KAAKC,UAAUwE,KA9IxB,IAiJZiB,oBAAU,aAEP,CAACnB,KAoBJmB,oBAAU,YLzML,SAAP,mCK0MIK,CAAe7F,GAAQ8F,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAAQF,KAAK,SAAAC,GAClD,IAAIE,EAAS,CAACC,GAAI,GAAIC,GAAI,GAAIC,IAAK,EAAGC,IAAK,EAAGC,IAAK,GACnDP,EAAIG,GAAGK,MAAM,KAAKC,QAAQ,SAACC,GACzBR,EAAOC,GAAGzG,KAAKiH,WAAWD,MAE5BV,EAAII,GAAGI,MAAM,KAAKC,QAAQ,SAACC,GACzBR,EAAOE,GAAG1G,KAAKiH,WAAWD,MAE5BR,EAAOG,IAAML,EAAIK,IACjBH,EAAOI,IAAMN,EAAIM,IACjBJ,EAAOK,IAAMP,EAAIO,IACjB/C,EAAa,SAAA4B,GAAC,OAAIc,MAGpBrC,GAAe,IACd,CAACD,EAAaf,IAEjB,IAAM+D,GAAcC,sBAAY,SAACC,GAC/B,GAAKxF,IAAcA,GAAUC,UAAW6C,GAAxC,CAEA,IAAM2C,EAAcC,GAAeF,GAE7BtF,EAD4BF,GAAUC,QACrBE,WAAW,MAClC,GAAMsF,GAAiBvF,EAAS,CAC9B,IAAMyF,EAAWhC,GAEXiC,EAAMC,GAAWJ,EAAaE,EAASpC,UAAWpB,GACxDwD,EAASjC,cAAgB,EACzBiC,EAASnC,WAAaoC,EACtB1F,EAAQ4F,YACR5F,EAAQ6F,OAAOH,EAAItK,EAAGsK,EAAInK,GAC1B,IAAMuK,EAAMhH,KAAKgH,MACjB5C,GAAY,GAAD,mBAAKvE,IAAL,CAAe,CAACnD,KAAM,QAASJ,EAAGsK,EAAItK,EAAGG,EAAGmK,EAAInK,EAAGwK,EAAGD,MAEjEpC,GAAS+B,GACTrE,GAAc,GAGdmB,EAAe,WAGjB,CAACN,EAAYF,EAAW0B,GAAO9E,GAAUiE,KAErCoD,GAAcX,sBAAY,SAACC,GAC/B,GAAKxF,IAAcA,GAAUC,UAAW6C,GAAxC,CAGA,IAAM8C,EAAMF,GAAeF,GAC3B3C,EAAqB+C,GAErB,IAAMD,EAAWhC,GAEjB,GAAMiC,GAAShD,EAAmB,CAChC,IAAMuD,EAAMC,GAAOxD,EAAmBgD,GACtCD,EAASpC,UAAY4C,EAChB9E,IAAYsE,EAASlC,gBAAkB0C,GAE9C,GAAI9E,EAAY,CACd,IACMnB,EAD4BF,GAAUC,QACrBE,WAAW,MAClC,IAAKD,EAAS,OAEd,IAAMmG,EAAOC,GAAYV,EAAKhD,GAC9B+C,EAASjC,eAAiB2C,EAG1B,IAFA,IAAME,EAAYZ,EAASjC,cACvB8C,EAAWrE,EACRwD,EAASjC,cAAgBtE,GAAgB,CAE9C,IAAMqH,GAASF,EAAYZ,EAASjC,eAAiB6C,EAC/CJ,EAAMO,GAAUC,GAAWhD,GAAMJ,UAAWoC,EAASpC,UAAWkD,IAClEG,EAASf,GAAWD,EAAKO,EAAKK,GAIlCI,EAASD,GAAWhB,EAASnC,WAAYoD,EAAQ,IACjD1G,EAAQ2G,OAAOD,EAAOtL,EAAGsL,EAAOnL,GAChCyE,EAAQ4G,SAER,IAAMd,EAAMhH,KAAKgH,MACjB5C,GAAY,GAAD,mBAAKvE,IAAL,CACT,CAACnD,KAAM,SAAUJ,EAAGsL,EAAOtL,EAAGG,EAAGmL,EAAOnL,EAAGwK,EAAGD,GAC9C,CAACtK,KAAM,UAAWJ,EAAGsK,EAAItK,EAAGG,EAAGmK,EAAInK,EAAGwK,EAAGD,MAE3CL,EAASnC,WAAaoD,EACtBJ,EAAWA,EAAWvE,EAAU4C,GAAGhJ,OAAS2K,EAAW,EAAI,EAC3Db,EAASjC,eAAiBtE,EAC1BuG,EAASnC,WAAaoD,EAExBxE,EAAcoE,GACd5C,GAAS+B,MAEV,CAACxD,EAAYF,EAAW0B,GAAOtC,EAAYuB,EAAmB/D,GAAUiE,KAErEiE,GAAYxB,sBAAY,SAACC,GAC7B,GAAKxF,IAAcA,GAAUC,UAAW6C,GAAxC,CAGA,IAAM2C,EAAcC,GAAeF,GAE7BtF,EAD4BF,GAAUC,QACrBE,WAAW,MAElC,GAAKD,EAAL,CAEA,GAAMuF,GAAepE,EAAY,CAC/B,IAAMuE,EAAMC,GAAWJ,EAAa9B,GAAMJ,UAAWpB,GAErDjC,EAAQ2G,OAAOjB,EAAItK,EAAGsK,EAAInK,GAC1ByE,EAAQ4G,SAER,IAAMd,EAAMhH,KAAKgH,MACjB5C,GAAY,GAAD,mBAAKvE,IAAL,CACT,CAACnD,KAAM,SAAUJ,EAAGsK,EAAItK,EAAGG,EAAGmK,EAAInK,EAAGwK,EAAGD,GACxC,CAACtK,KAAM,UAAWJ,EAAGmK,EAAYnK,EAAGG,EAAGgK,EAAYhK,EAAGwK,EAAGD,GACzD,CAACtK,KAAM,MAAOuK,EAAGD,MAGrB9F,EAAQ8G,YAER1F,GAAc,GAEdmB,EAAe,WACd,CAACN,EAAYF,EAAW0B,GAAOtC,EAAYxC,GAAUiE,KAElDmE,GAAe1B,sBAAY,SAACC,GAChCuB,GAAUvB,IACT,CAACrD,EAAYF,EAAW0B,GAAOtC,EAAYxC,GAAUiE,KAExDqB,oBAAU,WACR,GAAKnE,IAAcA,GAAUC,QAA7B,CAEA,IAAMzD,EAA4BwD,GAAUC,QACtCC,EAAU1D,EAAO2D,WAAW,MAQlC,OAPA+G,OAAOC,OAAOjH,EAAS,CACrBkH,SAAU,QACVC,UAAW,GACXC,YAAazH,KAEfrD,EAAO+K,iBAAiB,YAAajC,IAE9B,WACL9I,EAAOgL,oBAAoB,YAAalC,OAEzC,CAACA,KAEJnB,oBAAU,WACR,GAAKnE,IAAcA,GAAUC,QAA7B,CAEA,IAAMzD,EAA4BwD,GAAUC,QAG5C,OAFAzD,EAAO+K,iBAAiB,YAAarB,IAE9B,WACL1J,EAAOgL,oBAAoB,YAAatB,OAEzC,CAACA,KAEJ/B,oBAAU,WACR,GAAKnE,IAAcA,GAAUC,QAA7B,CAEA,IAAMzD,EAA4BwD,GAAUC,QAI5C,OAHAzD,EAAO+K,iBAAiB,aAAcN,IACtCzK,EAAO+K,iBAAiB,UAAWR,IAE5B,WACLvK,EAAOgL,oBAAoB,aAAcP,IACzCzK,EAAOgL,oBAAoB,UAAWT,OAEvC,CAACA,KAEJ,IAAMrB,GAAiB,SAACF,GACtB,IAAMhJ,EAAmCwD,GAAUC,QACnD,MAAO,CACL3E,EAAGkK,EAAMiC,MAAQjL,EAAOkL,WACxBjM,EAAG+J,EAAMmC,MAAQnL,EAAOoL,YAItB/B,GAAa,SAACD,EAAkBO,EAAkB9K,GACtD,IAAMwM,EAAc5F,EAAU4C,GAAGxJ,GAC3ByM,EAAc7F,EAAU6C,GAAGzJ,GAC3B0M,GAAc5B,EAAI1K,EAAlBsM,EAAwB5B,EAAI7K,EAClC,MAAO,CACLA,EAAGsK,EAAItK,GAAK6K,EAAI7K,EAAIuM,EAAKE,EAAWD,GAAM3I,EAC1C1D,EAAGmK,EAAInK,GAAK0K,EAAI1K,EAAIoM,EAAKE,EAAWD,GAAM3I,IAIxCmH,GAAc,SAACvI,EAAgBiK,GACnC,IAAMC,EAAK,SAAClK,EAAEzC,EAAI0M,EAAE1M,EAAM,GAAf,SAAoByC,EAAEtC,EAAIuM,EAAEvM,EAAM,GAC7C,OAAOwM,EAAK,EAAI1M,KAAKW,KAAK+L,GAAM,GAG5BtB,GAAa,SAAC5I,EAAgBiK,EAAgB/B,GAClD,MAAO,CACL3K,EAAIyC,EAAEzC,GAAK0M,EAAE1M,EAAIyC,EAAEzC,GAAG2K,EACtBxK,EAAIsC,EAAEtC,GAAKuM,EAAEvM,EAAIsC,EAAEtC,GAAGwK,IAIpBS,GAAY,SAAC3I,GACjB,IAAMmK,EAAOnK,EAAEzC,EAAIyC,EAAEzC,EAAIyC,EAAEtC,EAAIsC,EAAEtC,EACjC,GAAIyM,EAAO,KAAM,CACf,IAAMC,EAAM5M,KAAKW,KAAKgM,GACtBnK,EAAEzC,GAAK6M,EAAKpK,EAAEtC,GAAK0M,EAErB,OAAOpK,GAGHqI,GAAS,SAACgC,EAAmBC,GACjC,IAAMlC,EAAM,CAAC7K,EAAG+M,EAAG/M,EAAI8M,EAAK9M,EAAGG,EAAG4M,EAAG5M,EAAI2M,EAAK3M,GACxCyM,EAAO/B,EAAI7K,EAAI6K,EAAI7K,EAAI6K,EAAI1K,EAAI0K,EAAI1K,EACzC,GAAIyM,EAAO,KAAM,CACf,IAAMC,EAAM5M,KAAKW,KAAKgM,GACtB/B,EAAI7K,GAAK6M,EACThC,EAAI1K,GAAK0M,EAEX,OAAOhC,GAGHmC,GAAa,CACjBC,YAAa,cACbC,YAAa,QACbC,YAAa,MACb,SAAU,CACRC,WAAY,QACZH,YAAazI,GACb6I,MAAO,QACPC,OAAQ,UACRC,WAAY,SAKhB,OAAO,oCACJ/F,IACC,kBAAC,IAAD,CAAMzC,MAAO,GACXyI,QAAQ,QACRC,MAAO,CACLL,WAAY,UACZM,SAAU,QACVC,KAAM,MACNC,IAAK,MACLC,UAAW,0BAEf,kBAAC,IAAD,CACEvJ,SAAU,GADZ,gIAEgI8C,EAFhI,IAGE,6BACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKrC,MAAO,IACZ,kBAAC,IAAD,eAAQyI,QAAQ,QAAQM,OAAO,OAC7BC,GAAG,QACC3J,GAFN,CAGEmI,GAAIS,GACJgB,QAAS,WAAOvG,IAAe,MAJjC,WAMA,kBAAC,IAAD,CAAK1C,MAAO,IACZ,kBAAC,IAAD,eAAQyI,QAAQ,QAAQM,OAAO,OAC7BC,GAAG,QACC3J,GAFN,CAGEmI,GAAIS,GACJgB,QAAS,YAvRJ,WACb,IAAMC,EAAgB9K,KAAK+K,MAAM/K,KAAKC,UAAUwE,KAChDqG,EAAc7G,GAAW,CACvB7D,SAAUA,GAAS7B,QACnBmC,SAAUA,EACVC,eAAgBA,EAChBwF,OAAQ3C,GAEVoC,QAAQC,IAAI,sBACZD,QAAQC,IAAIiF,GACZpG,GAAcoG,GAEd1F,GAAkB7D,IAElB2C,EAAWD,EAAU,GACrBK,IAAe,GAwQS0G,MAJlB,cAaLzG,IACC,kBAAC,IAAD,CAAM3C,MAAO,GACXyI,QAAQ,QACRC,MAAO,CACLL,WAAY,UACZM,SAAU,QACVC,KAAM,MACNC,IAAK,MACLC,UAAW,0BAEb,kBAAC,IAAD,4HAEE,6BAFF,8CAG6C,2BAAIxK,GAHjD,gBAIE,kBAAC,mBAAD,CACEqF,KAAMrF,EACNoK,MAAO,CACLD,QAAS,QACTM,OAAQ,SAGZ,sDAEC/F,IAAU,kBAAC,IAAD,CAAMsF,MAAM,OAAO/I,SAAS,QAA5B,aAKf,kBAAC,IAAD,CAAMS,MAAOA,EAAO+I,OAAO,QACzB,kBAAC,IAAD,CAAKA,OAAO,OAAON,QAAQ,SAEzB/E,GAAQjK,IAAI,SAACY,GAAD,OACZ,kBAAC,IAAD,eACEgP,IAAKhP,EAAOsJ,KACZsF,QAAS5O,EAAOuJ,GAChBoF,GAAI3O,EAAOK,KAAO2H,EAAU,OAAS,OACrCiH,GAAI,EACJC,GAAI,GACAlK,GANN,CAOEmI,GAAIS,KACJ5N,EAAOsJ,WAObhB,IACF,oCACM,kBAAC,IAAD,CAAKoG,OAAO,OAAON,QAAQ,SACzB,kBAAC,IAAD,CAAMlJ,SAAS,OAAOiK,UAAU,UAAUjJ,GAAQ8B,MAEhDQ,GAAWR,KAAaM,IAC1B,oCACE,6BACA,kBAAC,IAAD,CAAM3C,MAAOA,EAAO+I,OAAO,QAC3B,kBAAC,IAAD,CAAK/I,MAAO,IACV,kBAAC,IAAD,eACE+I,OAAO,OACPN,QAAQ,QACRgB,gBAAgB,aACZpK,GAJN,CAKEmI,GAAIS,GACJgB,QAAS,kBAAM9H,GAAS,MAN1B,UAUF,kBAAC,IAAD,CAAKnB,MAAO,IACZ,kBAAC,IAAD,eACE+I,OAAO,OACPN,QAAQ,QACRgB,gBAAgB,QACZpK,GAJN,CAKEmI,GAAIS,GACJgB,QAAS,kBAAMpF,GAAiBxB,EAAQ,MAN1C,eAcCQ,GAAWR,KAAaM,IACzB,kBAAC,IAAD,uCAEF,6BACF,4BACI+G,IAAK/J,GACLM,OAAQA,EACRD,MAAOA,EACP0I,MAAO,CACLiB,OAAO,aAAD,OAAenK,IACrBoK,aAAc,MACdb,OAAQ,OACRN,QAAS,QACTF,OAAQpG,SEliBX0H,GAAO,SAACC,GAAD,oBAClBzO,KAAMpB,GACLH,EAAIgQ,IAGMC,GAAO,SAACD,GAAD,oBAClBzO,KAAMnB,GACLH,EAAI+P,IAGME,GAAO,SAACF,GAAD,oBAClBzO,KAAM1B,GACLJ,EAAIuQ,IAGMG,GAAO,SAACH,GAAD,oBAClBzO,KAAMzB,GACLJ,EAAIsQ,IAGMI,GAAW,SAACJ,GAAD,oBACtBzO,KnBPuB,amBQtBxB,EAAQiQ,IAQEK,GAAe,SAACL,GAAD,oBAC1BzO,KnBuD2B,iBAFJ,YmBpDVyO,IAGFM,GAAe,SAACN,GAAD,oBAC1BzO,KnBmD2B,iBAFJ,YmBhDVyO,IAGFO,GAAgB,SAACP,GAAD,oBAC3BzO,KnBlB6B,mBmBmB5BlB,EAAc2P,ICrCJQ,GAAc,SAACC,GAAD,oBACzBlP,KpBuC8B,kBoBtC7BjB,EAAemQ,ICPZC,GAAatP,KAAKC,MAAsB,EAAhBD,KAAK4C,UAAgB,EAC7C2M,GAAe,YAAOC,MAAMF,K,IAuEhB3J,YAND,SAACzE,GAAD,MAAmB,CAClCD,OAAQC,EAAMD,SAGI,GAIG2E,CAvEO,SAAC,GAOxB,IANL3E,EAMI,EANJA,OACA+E,EAKI,EALJA,MACAjB,EAII,EAJJA,OACAD,EAGI,EAHJA,MACA2K,EAEI,EAFJA,cACAC,EACI,EADJA,sBAEMjL,EAAYsD,iBAA0B,MAEtC4H,EAAWC,cAEXC,EAAWC,YAAY,kBAAM7O,ErBgCZ,eqB/BjB8O,EAAWD,YAAY,kBAAM7O,ErBgCZ,eqBOvB,OAZA2H,oBAAU,WDpDY,IAAC/I,OCqDCP,IAAlBmQ,GACFE,GDtDmB9P,ECsDD4P,EDtDA,aACtBtP,KpB0CuB,aAHJ,QoBtCVN,KCyBW,WAClB,GAAK4E,GAAcA,EAAUC,SAAYgL,GAA0BD,EAAnE,CAGA,IACM9K,EAD4BF,EAAUC,QACrBE,WAAW,MAE5BD,GAAakL,GAAcE,GAC/BR,GAAgBhR,IAAI,SAACgK,EAAGzI,GAEtB6L,OAAOC,OAAOjH,EAAS,CACrBkH,SAAU,QACVC,UAAW,KAGbnH,EAAQoH,YAAc,qBACtBpH,EAAQ4F,YACR5F,EAAQ6F,OAAOqF,EAAW,GAAIE,EAAW,IACzCpL,EAAQ2G,OAAOuE,EAAUE,GACzBpL,EAAQ8G,YACR9G,EAAQ4G,YAUZyE,IACC,CAACN,IAEJ9G,oBAAU,WACRpE,GAAYC,IACX,CAACuB,IAEG,4BAAQwI,IAAK/J,EAClBM,OAAQA,EACRD,MAAOA,EACP0I,MAAO,CACLiB,OAAO,aAAD,OAAelK,IACrBmK,aAAc,MACduB,WAAY,YCmDAtK,YAFD,SAACzE,GAAD,OAAkBA,GACf,GAGE0E,CAvGQ,SAAC,GAYxB,IAXL/D,EAWI,EAXJA,cACAmE,EAUI,EAVJA,MACAlG,EASI,EATJA,MACAiF,EAQI,EARJA,OACAD,EAOI,EAPJA,MACA+I,EAMI,EANJA,OACA4B,EAKI,EALJA,cACAC,EAII,EAJJA,sBACAQ,EAGI,EAHJA,cACAC,EAEI,EAFJA,UACAnI,EACI,EADJA,UAEMvD,EAAYsD,iBAA0B,MACtCqI,EAAkD,IAA1CN,YAAY,kBAAMjO,EAAclD,KACxC0R,EAAYP,YAAY,kBAAMjO,EAAa,YAC3CyO,EAAYR,YAAY,kBAAMjO,EAAa,YAEjD+G,oBAAU,WACRpE,GAAYC,IACX,CAACuB,IAmEJ,OALA4C,oBAAU,YA5DO,WAEf,GAAKnE,GAAcA,EAAUC,QAA7B,CAGA,IAEMC,EAF4BF,EAAUC,QAErBE,WAAW,MAElC,GAAID,EAAS,CACXgH,OAAOC,OAAOjH,EAAS,CACrBkH,SAAU,QACVC,UAAW,GACXC,YAAa,SAGfpH,EAAQ4F,YAER,IAAMgG,EAAO,WACX,GAAMb,GAA2BD,EAAe,CAC9C,IAAMe,EAAM,SAAChS,GAEX,IAAKA,EACH,MAAO,CAAEuB,EAAG,KAAMG,EAAG,MAH2B,IAKvCuQ,EAA4BjS,EAA/BuB,EAAiB2Q,EAAclS,EAAjB0B,EAChByQ,EtBuBC,QsBvBMR,EAAoBnQ,KAAK4Q,IAAM5Q,KAAK6Q,IAE3C9Q,EAAKgF,EAAS,EACjBsL,EAAYvQ,EAAS6Q,EAAKD,GAAaJ,EAAYxQ,IAC/C2Q,EAEDvQ,EAAK6E,EAAS,EACjBsL,EAAYvQ,EAAS6Q,EAAKF,GAAaH,EAAYxQ,IAC/C4Q,EAEP,MAAO,CACL3Q,GAAIiI,IAAc3J,EAAIoS,EAAY1Q,GAAKmQ,EACvChQ,GAAI8H,IAAc1J,EAAIoS,EAAYxQ,GAAKgQ,IAnBG,EAuBXM,EAAId,GAA5BoB,EAvBmC,EAuBtC/Q,EAAegR,EAvBuB,EAuB1B7Q,EAvB0B,EAwBXsQ,EAAIf,GAA5BuB,EAxBmC,EAwBtCjR,EAAekR,EAxBuB,EAwB1B/Q,EAEd4Q,GAAaC,GAAaC,GAAaC,IAC3CtM,EAAQ6F,OAAOsG,EAASC,GACxBpM,EAAQ2G,OAAO0F,EAASC,GACxBtM,EAAQ8G,YACR9G,EAAQ4G,YAKJ,IAAV6E,EACIc,WAAW,WAAQX,KAAUH,EAAQtQ,GACrCyQ,MAKNY,IACC,CAACzB,IAGG,4BACL3K,OAAQA,EACRD,MAAOA,EACP0J,IAAK/J,EACL+I,MAAO,CACLiB,OAAO,aAAD,OAAelK,IACrB6M,YAAY,GAAD,OAAKvD,EAAL,MACXa,aAAc,W,OChCP2C,IC6GK1L,YAJD,SAACzE,GAAD,OAAkBA,GAEf,GAIS0E,CApJQ,SAAC,GAAuB,IAArB/D,EAAoB,EAApBA,cAChC8N,EAAWC,cAEX0B,EAAsB,CAAC,CAC3B9R,GAAInB,EACJc,OAAQ2P,GACRF,MAAOkB,YAAY,kBAAMjO,EAAa,KACrC,CACDrC,GAAIlB,EACJa,OAAQ4P,GACRH,MAAOkB,YAAY,kBAAMjO,EAAa,MAGlC0P,EAAyB,CAAC,CAC9B/R,GxBkCqB,YwBjCrBL,OAAQ8P,GACRL,MAAOkB,YAAY,kBAAMjO,EAAa,aACrC,CACDrC,GxB+BqB,YwB9BrBL,OAAQ+P,GACRN,MAAOkB,YAAY,kBAAMjO,EAAa,aACrC,CACDrC,GAAIb,EACJQ,OAAQ6P,GACRJ,MAAOkB,YAAY,kBAAMjO,EAAclD,MACtC,CACDa,GAAIN,EACJC,OAAQiQ,GACRR,MAAOkB,YAAY,kBAAMjO,EAAc3C,MACtC,CACDM,GAAIP,EACJE,OAAQgQ,GACRP,MAAOkB,YAAY,kBAAMjO,EAAc5C,OAUzC,OAAO,kBAAC,IAAD,CACLsO,QAAS,CAAC,OAAQ,OAAQ,SAC1BiE,GAAI,EAAG1M,MAAM,QACb,kBAAC,GAAD,CACE2M,mBAAiB,EACjBC,QxBjFwB,yBwBmFxB,kBAAC,IAAD,CACEC,cAAe,CxBxGD,kBwBwGkBvT,GAChCwT,eAAe,gBACfxD,GAAI,GAEJ,kBAAC,IAAD,iBACMjK,GADN,CAEE0N,GAAI,IxBxFc,gBwB6FpB,kBAAC,IAAD,CACEC,WAAW,SACXH,cAAevT,GAFjB,IAIIkT,EAAoB/S,IAAI,SAACwT,EAAQjS,GAAT,OAC1B,kBAAC,KAAD,CACEqO,IAAK4D,EAAOvS,GACZwS,QAASD,EAAOvS,GAChBsF,MAAM,QAEN,kBAAC,KAAD,CACEmN,KAAMF,EAAOvS,GACb0S,IAAK,EACL/R,KxBpIQ,SwBqIRgS,SAAU,SAACC,GACTzC,EAASoC,EAAO5S,OAAOkT,SAASD,EAAEE,OAAO1D,MAAO,OAElD2D,GAAI,EACJjG,GAAI,CACFU,YAAazI,GACbmK,aAAc,OAEhBE,MAAOmD,EAAOnD,QAEL,IAAV9O,EAAc,kBAAC,IAAD,CACb0S,UAAU,WACVC,GAAI,GAFS,KAGH,QA3BhB,MAiCF,kBAACpB,GAAD,MAECE,EAAuBhT,IAAI,SAACmU,EAAQ5S,GAAT,OAC1B,kBAAC,IAAD,CAAM6R,cAAevT,EACnBwT,eAAe,gBACfE,WAAW,SACX1D,GAAI,GAEJ,kBAAC,IAAD,iBACMjK,GADN,CAEE0N,GAAI,IAEHa,EAAOlT,IAEV,kBAAC,KAAD,CACE2O,IAAKuE,EAAOlT,GACZwS,QAASU,EAAOlT,GAChBsF,MAAM,QAEN,kBAAC,KAAD,CACEmN,KAAMS,EAAOlT,GACb0S,IAAK,EACL/R,KxB9KQ,SwB+KRgS,SAAU,SAACC,GACTzC,EAAS+C,EAAOvT,OAAOkT,SAASD,EAAEE,OAAO1D,MAAO,OAElD2D,GAAI,EACJjG,GAAI,CACFU,YAAazI,GACbmK,aAAc,OAEhBE,MAAO8D,EAAO9D,aAQxB,kBAAC,GAAD,CACE6C,mBAAiB,EACjBC,QxBpHyB,mBwBsHzB,kBAAC,EAAD,U,MDtGY/L,YAJD,SAACzE,GAAD,OAAkBA,GAEf,GAIE0E,CAtEQ,SAAC,GAAgB,IAAd9D,EAAa,EAAbA,OAEzB6N,EAAWC,cAEX+C,EAAgB,CAAC,CACrBnT,GAAIZ,EACJO,OAAQwP,GACRC,MAAOkB,YAAY,kBAAMhO,EAAM,KAC9B,CACDtC,GAAIX,EACJM,OAAQ0P,GACRD,MAAOkB,YAAY,kBAAMhO,EAAM,MAGjC,OAAO,kBAAC,IAAD,CACL6P,cAAe,CvBpCG,kBuBoCcvT,GAChCwT,eAAe,gBACfxD,GAAI,GAEJ,kBAAC,IAAD,iBACMjK,GADN,CAEE0N,GAAI,IvBRuB,qBuBa7B,kBAAC,IAAD,CAAMF,cAAe,CvB/CH,kBuB+CoBvT,IAElCuU,EAAcpU,IAAI,SAAAO,GAAG,OACnB,kBAAC,IAAD,CACEgT,WAAW,SACXH,cAAevT,EACfwT,eAAe,aACfJ,GAAI,CAAC,EAAG,EAAG,GACXoB,GAAI,CAAC,EAAG,EAAG,GACX9N,MAAM,SAEN,kBAAC,KAAD,iBACMX,GADN,CAEE6N,QAASlT,EAAIU,GACbiT,GAAI,EACJ3N,MAAM,SAJR,UAMMhG,EAAIU,GANV,OAQA,kBAAC,KAAD,CACEyS,KAAMnT,EAAIU,GACV0S,IAAK,EACLC,SAAU,SAACC,GACTzC,EAAS7Q,EAAIK,OAAOkT,SAASD,EAAEE,OAAO1D,MAAO,OAE/CzO,KvB5EQ,SuB6ERyO,MAAO9P,EAAI8P,MACXtC,GAAI,CACFU,YAAazI,GACbmK,aAAc,iB,IEzEjB5K,GAAaI,KAAK,G,gBCelB2O,GAA0B,SAAC,GAIjC,IAHLC,EAGI,EAHJA,SAGI,IAFJrB,yBAEI,SADJC,EACI,EADJA,QACI,EAE8B7L,mBAAS4L,GAFvC,mBAEGsB,EAFH,KAEcC,EAFd,KAIJ,OAAO,kBAAC,IAAD,CACL5E,GAAI,EACJ9B,GAAI,CACF2G,kBAAmB,QACnBC,kBAAmB3O,GACnB4O,kBAAmB,QAGrB,kBAAC,IAAD,CACErB,WAAW,SACXF,eAAe,iBAEf,kBAAC,IAAD,iBACMzN,GADN,CAEEiJ,MAAO2F,EAAYzO,GAAQC,GAC3BsN,GAAI,EACJxN,SAAU,EACViI,GAAI,CACFgB,WAAY,mBAGboE,GAEH,kBAAC,IAAD,CACE3D,QAAS,WAAQiF,GAAcD,IAC/B3F,MAAO7I,GACPQ,OAAO,cACPqO,GAAI,EACJvB,GAAI,EACJvF,GAAI,CACF,SAAU,CACRc,MAAO9I,GACP+I,OAAQ,UACRC,WAAY,kBAIhB,kBAAC,KAAD,CACE+F,KAAMN,EAAY,WAAa,iBAKrC,kBAAC,aAAD,CAAWO,UAAU,yBAClBP,GAAa,kBAAC,IAAD,KACXD,MC7DHxD,ICoIY3J,YAJD,SAACzE,GAAD,OAAkBA,GAEf,GAIG0E,CA7GO,SAAC,GAWxB,IAVL3E,EAUI,EAVJA,OACAxB,EASI,EATJA,eACAuG,EAQI,EARJA,MACAlG,EAOI,EAPJA,MACAiF,EAMI,EANJA,OACAD,EAKI,EALJA,MACA+I,EAII,EAJJA,OAEA6B,GAEI,EAHJD,cAGI,EAFJC,uBACAQ,EACI,EADJA,cAEMzL,EAAYsD,iBAA0B,MAGtCpI,EAASmQ,YAAY,kBAAM7O,EAAM,SAEjCsS,EAAkBzD,YAAY,kBAAMrQ,EAAc,kBAIxDmJ,oBAAU,WACRpE,GAAYC,IACX,CAACuB,IAoEJ,OAPA4C,oBAAU,WACRsI,WAAW,YA5DI,WAEf,GAAKzM,GAAcA,EAAUC,QAA7B,CAGA,IACMC,EAD4BF,EAAUC,QACrBE,WAAW,MAElC,GAAMD,EAEJgH,OAAOC,OAAOjH,EAAS,CACrBkH,SAAU,QACVC,UAAW,GACXC,YAAa,uBAGIwH,EAAgBC,OAAsB,SAACC,EAAKtT,GAW7D,OAVAsT,EAAMtT,EAAKV,eAAe,CACxBC,KAAM,CACJC,OAAQ8T,EAAInT,OAAS,EAAImT,EAAM9T,EAC/BU,eAAgB,GAAKP,EAAQ,GAC7BY,SAAU,GACVd,QAAkB,GAARE,EAAe,EACzBM,QAAkB,GAARN,EAAe,MAK5B,IAEQ4T,OAAO,SAAA7T,GAAK,OAAIA,IAAOtB,IAAI,SAACsB,EAAOC,GAC5C,IAAMC,EAAIF,EAAME,EAAImQ,EACdhQ,EAAIL,EAAMK,EAAIgQ,EAEpB,OAAQrQ,EAAMM,MACZ,KAAKf,EACHuF,EAAQ4F,YACR5F,EAAQ6F,OAAOzK,EAAGG,GAClB,MACF,I5BRS,M4BSDL,EAAMgB,SACV8D,EAAQgP,IAAI5T,EAAGG,EAAGL,EAAMgB,OAAQ,EAAG,EAAIb,KAAK4T,IAC5CjP,EAAQ8G,YACR9G,EAAQ4G,UAEV,MACF,QACE5G,EAAQ2G,OAAOvL,EAAGG,GAClByE,EAAQ8G,YACR9G,EAAQ4G,YAMd5G,EAAQ8G,aAOR0F,IACS,GAARrR,IACF,CAAC4P,IAEG,4BACL3K,OAAQA,EACRD,MAAOA,EACP0J,IAAK/J,EACL+I,MAAO,CACLiB,OAAO,aAAD,OAAelK,IACrB6M,YAAY,GAAD,OAAKvD,EAAL,MACXa,aAAc,WD3HD1O,KAAKC,MAAsB,EAAhBD,KAAK4C,UAAgB,GAC9B,YAAO4M,MAAMF,KE+GhB3J,YAJD,SAACzE,GAAD,OAAkBA,GAEf,GAIO0E,CArGG,SAAC,GAUxB,IATL/D,EASI,EATJA,cACAmE,EAQI,EARJA,MACAlG,EAOI,EAPJA,MACAiF,EAMI,EANJA,OACAD,EAKI,EALJA,MACA+I,EAII,EAJJA,OACA4B,EAGI,EAHJA,cACAC,EAEI,EAFJA,sBACAQ,EACI,EADJA,cAEMzL,EAAYsD,iBAA0B,MACtC8L,EAAQ/D,YAAY,kBAAMjO,EAAa,QACvCuO,EAAkD,IAA1CN,YAAY,kBAAMjO,EAAclD,KAsE9C,OApEAiK,oBAAU,WACRpE,GAAYC,IACX,CAACuB,IAEJ4C,oBAAU,YACS,WAEf,GAAKnE,GAAcA,EAAUC,QAA7B,CAGA,IAEMC,EAF4BF,EAAUC,QAErBE,WAAW,MAElC,GAAID,EAAS,CACXgH,OAAOC,OAAOjH,EAAS,CACrBkH,SAAU,QACVC,UAAW,GACXC,YAAa,uBAGfpH,EAAQ4F,YAER,IAAMgG,EAAO,SAAC,GAAoC,IAAlCzQ,EAAiC,EAAjCA,MAAOgU,EAA0B,EAA1BA,IACrB,GAAMpE,GAA2BD,EAAe,CAC9C,IAAMe,EAAM,SAAChS,GAEX,IAAKA,EACH,MAAO,CAAEuB,EAAG,KAAMG,EAAG,MAH2B,IAKvCuQ,EAA4BjS,EAA/BuB,EAAiB2Q,EAAclS,EAAjB0B,EAEhBH,EAAI0Q,EAAkB,GAANqD,EAAW9T,KAAKY,KAAK,EAAGkT,GACxC5T,EAAIwQ,EAAoB,GAAR5Q,EAAaE,KAAK4Q,IAAIF,GAE5C,MAAO,CACL3Q,EAAIA,EAAKmQ,EACThQ,EAAIA,EAAKgQ,IAbiC,EAiBXM,EAAId,GAA5BoB,EAjBmC,EAiBtC/Q,EAAegR,EAjBuB,EAiB1B7Q,EAjB0B,EAkBXsQ,EAAIf,GAA5BuB,EAlBmC,EAkBtCjR,EAAekR,EAlBuB,EAkB1B/Q,EAEd4Q,GAAaC,GAAaC,GAAaC,IAC3CtM,EAAQ6F,OAAOsG,EAASC,GACxBpM,EAAQ2G,OAAO0F,EAASC,GACxBtM,EAAQ8G,YACR9G,EAAQ4G,YAKd,YAAIiE,MAAMqE,IAAQjK,QAAQ,SAACrB,EAAGuL,GAC5B,IAAMC,EAAS,CAAEjU,QAAOgU,OACxB5C,WAAW,WACC,IAAVd,EACIc,WAAW,WAAQX,EAAKwD,IAAW3D,EAAQtQ,GAC3CyQ,EAAKwD,IACF,IAAND,OAKT3C,IACC,CAACzB,IAGG,4BACL3K,OAAQA,EACRD,MAAOA,EACP0J,IAAK/J,EACL+I,MAAO,CACLiB,OAAO,aAAD,OAAelK,IACrB6M,YAAY,GAAD,OAAKvD,EAAL,MACXa,aAAc,W,KClFpBsF,IAAQC,IACNC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,KAGF,IAgBelP,iBAhBO,kBACpB,kBAAC,IAAD,CAAKyN,GAAI,EAAGtO,MAAM,QAChB,kBAAC,IAAD,eACEsJ,GAAI,GACAjK,GAFN,CAGEE,SAAU,EACVyQ,cAAc,QACdxG,UAAU,WALZ,iBAQA,kBAAC5I,GAAD,CACEX,OAAQ,IACRD,MAAO,SClDOiQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAD,CAAUC,MAAOvT,KACf,kBAAC,GAAD,OAEAwT,SAASC,eAAe,SD4HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzM,KAAK,SAAA0M,GACjCA,EAAaC,iB","file":"static/js/main.c55bef4f.chunk.js","sourcesContent":["export const NUMBER = \"number\";\n\nexport const GRID = \"grid\";\nexport const ROW = \"row\";\nexport const COLUMN = \"column\";\nexport const PRIMITIVES = [\"circle\", \"square\", \"slash\"] as const;\nexport const NONE = \"None\";\n\n// === PLANE === //\nexport const AVERAGE = \"Average\";\nexport const CANVAS = \"Canvas\";\nexport const CANVAS_GENERATIVE = \"Canvas (Generative)\";\nexport const SHAPE = \"Shape\";\nexport const THREE_JS = \"3D\";\nexport const SURVEY_CANVAS = \"Survey Canvas (in development)\"\n\n// === CONFIGURATION === //\n\nexport const CONFIGURATION = \"Configuration\";\n\n// === SURVEY === //\nexport const SURVEY = \"Survey\";\n\n// === DEFAULT === //\nexport const DEFAULT_CONFIG = \"Default configuration\";\n\nexport const ANCHOR_POINT = \"Anchor point\";\nexport const X = \"X\";\nexport const Y = \"Y\";\nexport const CARTESIAN = [X, Y] as const;\nexport const [SET_X, SET_Y] = CARTESIAN.map(coordinate => `set_${coordinate}`);\n\nexport const NUM_LINES = \"Lines\";\nexport const SET_NUM_LINES = \"set_num_lines\";\n\nexport const DELAY = \"Delay (x 100ms)\";\nexport const SET_DELAY = \"set_delay\";\n\nexport const MATRIX_DIMENSIONS = \"Matrix dimensions\";\nexport const M = \"m\";\nexport const N = \"n\";\nexport const DIMENSIONS = [M, N] as const;\nexport const [SET_M, SET_N] = DIMENSIONS.map(dim => `set_${dim}`);\n\nexport const DATA_FORMAT = \"Data format (0=points, 1=deltas)\";\nexport const SET_DATA_FORMAT = \"set_data_format\";\n\n// VERBS\nexport const VERBS = \"Verbs\";\n\n// === DATA FORMATTING === //\nexport const RESET_DATA = \"reset_data\";\n\nexport const POINT = \"Point\";\nexport const POINTS = \"Points\";\nexport const NUM_POINTS = \"Number of points\";\nexport const ADD_POINT = \"add_point\";\nexport const SET_LAST_POINT = \"add_delta\";\n\nexport const TIMESTAMP = \"Timestamp\";\nexport const TIMESTAMPS = \"Timestamps\";\nexport const ADD_TIMESTAMP = \"add_timestamp\";\nexport const DELETE_TIMESTAMPS = \"delete_timestamps\";\n\nexport const SEGMENTS = \"Segments\";\nexport const NUM_SEGMENTS = \"Number of segments\";\nexport const ADD_SEGMENT = \"add_segment\";\nexport const SET_NUM_SEGMENTS = \"set_num_points\";\n\nexport const AVERAGE_X = \"Average X\";\nexport const AVERAGE_Y = \"Average Y\";\n\nexport const DELTA_X = \"Delta (x)\";\nexport const DELTA_Y = \"Delta (y)\";\n\n// TRANSFORMATIONS\nexport const TRANSFORMATION = \"Transformation\";\nexport const TRANSFORMATIONS = \"Transformations\";\nexport const ADD_TRANSFORMATION = \"add_transformation\";\nexport const SET_TRANSFORMATION = \"set_transformation\";\nexport const SET_TRANSFORMATIONS = \"set_transformations\";\n\nexport const INDEX_BASED = \"Index based\";\nexport const SET_INDEX_BASED = \"set_index_based\";\nexport const DISTANCE = \"Distance\";\nexport const SET_DISTANCE = \"set_distance\";\n\nexport const [ADD_RULE, DELETE_RULE, EDIT_RULE] = [\"add\", \"delete\", \"edit\"].map(\n  action => `${action}_rule`\n);\n\nexport const MOVE_TO = \"move_to\";\nexport const LINE_TO = \"line_to\";\n\n// TRANSFORM PRESETS\nexport const ARC = \"arc\";\nexport const CIRCLE = \"circle\";\nexport const SCALE_X = \"scale_x\";\nexport const SCALE_Y = \"scale_y\";\nexport const SQUARE = \"square\";\nexport const TANGENT_LINE = \"tangent_line\";\nexport const TREE = \"tree\";\n\n// WAVES\nexport const SIN = \"sin\";\nexport const COS = \"cos\";\nexport const AMPLITUDE = \"Amplitude\";\nexport const FREQUENCY = \"Frequency\";\nexport const SET_AMPLITUDE = \"set_amplitude\";\nexport const SET_FREQUENCY = \"set_frequency\";\n\n// SEGMENT\nexport const SEGMENT = \"Segment\";\n\n// FILTERS - not being used\nexport const FILTER = \"Filter\";\nexport const FILTERS = \"Filters\";\n\nexport const BLUR = \"Blur\";\nexport const BRIGHTNESS = \"Brightness\";\nexport const CONTRAST = \"Contrast\";\nexport const DROP_SHADOW = \"Drop shadow\";\nexport const GRAYSCALE = \"Grayscale\";\nexport const HUE_ROTATION = \"Hue rotation\";\nexport const INVERT = \"Invert\";\nexport const OPACITY = \"Opacity\";\nexport const SATURATE = \"Saturate\";\nexport const SEPIA = \"Sepia\";\nexport const URL = \"URL\";\n\nexport const NOISE_FILTERS = \"Noise filters\";\n","import {\n  ADD_POINT,\n  AVERAGE_X,\n  AVERAGE_Y,\n  NUM_POINTS,\n  NUM_SEGMENTS,\n  POINT,\n  POINTS,\n  SEGMENTS,\n  RESET_DATA,\n  TIMESTAMP,\n  TIMESTAMPS,\n  ADD_TIMESTAMP,\n} from '../constants'\nimport { Action, Coordinate } from '../types'\n\ntype State = {\n  [AVERAGE_X]: number | undefined,\n  [AVERAGE_Y]: number | undefined,\n  [NUM_POINTS]: number,\n  [NUM_SEGMENTS]: number,\n  [POINTS]: Coordinate[],\n  [TIMESTAMPS]: Date[]\n}\n\nconst defaultState: State = {\n  [AVERAGE_X]: undefined,\n  [AVERAGE_Y]: undefined,\n  [NUM_POINTS]: 0,\n  [NUM_SEGMENTS]: 1, // TODO REPLACE THIS FROM CONFIGURATION\n  [POINTS]: [],\n  [TIMESTAMPS]: []\n}\n\nexport const canvas = <T extends any>(state = defaultState, action: Action<T>) => {\n\n  const points = state[POINTS]\n  const numPoints = points.length\n\n  const numSegments = state[NUM_SEGMENTS]\n  const isSegmentBased = numSegments !== 0\n  const sliceStart = numPoints - numSegments\n  const sliceEnd = numPoints + 1\n\n  switch (action.type) {\n    case ADD_POINT:\n      const point: Coordinate = action[POINT]\n\n\n      // const { x, y } = point\n      // const {\n      //   x: prevX,\n      //   y: prevY\n      // } = points[currentNumPoints - 1] || { x: 0, y: 0 }\n\n      // const currentXAverage = state[AVERAGE_X] as number\n      // const currentYAverage = state[AVERAGE_Y] as number\n\n      // const xAverage = currentXAverage === undefined ? x : ((currentNumPoints * currentXAverage) + x) / numPoints\n      // const yAverage = currentYAverage === undefined ? x : ((currentNumPoints * currentYAverage) + y) / numPoints\n\n      // const amplitude = 10 * 10\n      // const frequency = 20 * 0.25 * 10\n      // const transformedY = (x) => 300 + amplitude * Math.sin(x / frequency)\n\n      // const deltasTransform = state[DELTAS_TRANSFORM]\n\n      const aggregatePoints = [...points, point]\n\n      return {\n        ...state,\n        // [DELTAS]: [...state[DELTAS], {\n        //   x: point.x - prevX,\n        //   y: point.y - prevY,\n        // }],\n        // [DELTAS_TRANSFORM]: [...state[DELTAS_TRANSFORM], {\n        //   x: point.x - prevX,\n        //   y: transformedY(point.x) - transformedY(prevX)\n\n        // }],\n        [POINTS]: isSegmentBased && numPoints > numSegments\n          ? aggregatePoints.slice(sliceStart, sliceEnd)\n          : aggregatePoints,\n        // [POINTS]: aggregatePoints,\n        // [AVERAGE_X]: xAverage,\n        // [AVERAGE_Y]: yAverage,\n        [NUM_POINTS]: numPoints\n      }\n    case ADD_TIMESTAMP:\n      const timestamp: Date = action[TIMESTAMP]\n      const timestamps = state[TIMESTAMPS]\n      const aggregateTimestamps = [...timestamps, timestamp]\n\n      return {\n        ...state,\n        [TIMESTAMPS]: isSegmentBased\n          ? aggregateTimestamps.slice(sliceStart, sliceEnd)\n          : aggregateTimestamps\n      }\n    case RESET_DATA:\n      return defaultState\n    default:\n      return state\n  }\n}","import {\n  AMPLITUDE,\n  DELAY,\n  DATA_FORMAT,\n  FREQUENCY,\n  NUM_LINES,\n  NUM_SEGMENTS,\n  X,\n  Y,\n  SET_AMPLITUDE,\n  SET_DELAY,\n  SET_DATA_FORMAT,\n  SET_FREQUENCY,\n  SET_NUM_LINES,\n  SET_X,\n  SET_Y,\n  SET_NUM_SEGMENTS\n} from '../constants'\nimport { Action } from '../types'\n\nexport const configuration = <T extends unknown>(\n  state = {\n    [AMPLITUDE]: 10,\n    [DATA_FORMAT]: 1,\n    [DELAY]: 1,\n    [FREQUENCY]: 20,\n    [NUM_LINES]: 1,\n    [NUM_SEGMENTS]: 2,\n    [X]: 0,\n    [Y]: 0,\n  }, action: Action<T>) => {\n  switch (action.type) {\n    case SET_DELAY:\n      return {\n        ...state,\n        [DELAY]: action[DELAY]\n      }\n    case SET_DATA_FORMAT:\n      return {\n        ...state,\n        [DATA_FORMAT]: action[DATA_FORMAT]\n      }\n    case SET_NUM_LINES:\n      return {\n        ...state,\n        [NUM_LINES]: action[NUM_LINES]\n      }\n    case SET_NUM_SEGMENTS:\n      return {\n        ...state,\n        [NUM_SEGMENTS]: action[NUM_SEGMENTS]\n      }\n    case SET_X:\n      return {\n        ...state,\n        [X]: action[X]\n      }\n    case SET_Y:\n      return {\n        ...state,\n        [Y]: action[Y]\n      }\n    case SET_AMPLITUDE:\n      return {\n        ...state,\n        [AMPLITUDE]: action[AMPLITUDE]\n      }\n    case SET_FREQUENCY:\n      return {\n        ...state,\n        [FREQUENCY]: action[FREQUENCY]\n      }\n    default:\n      return state\n  }\n}","import React from 'react'\nimport { Box } from 'rebass'\nimport {\n  circle,\n  cos,\n  scale_x,\n  scale_y,\n  sin,\n  square,\n  tree\n} from '../transformations'\n\ntype Props = {}\n\nexport const TRANSFORMATION_PRESETS = [\n  scale_x,\n  scale_y,\n  // tree,\n  // cos,\n  // sin,\n  // square,\n  circle\n] as const\n\nexport const Transformations: React.FC<Props> = () => {\n  return <Box />\n}","import { SCALE_X, MOVE_TO, LINE_TO } from '../constants'\nimport { Transformation } from '../types'\n\nexport const scale_x: Transformation = {\n  id: SCALE_X,\n  transformation: ({ args }) => {\n    const {\n      points = [],\n      scale_x = 1\n    } = args\n\n    return points.map((point, index) => ({\n      x: Math.floor(point.x * scale_x),\n      y: point.y,\n      type: index === 0 ? MOVE_TO : LINE_TO\n    }))\n  }\n} ","import { LINE_TO, MOVE_TO, SCALE_Y } from '../constants'\nimport { Transformation } from '../types'\n\nexport const scale_y: Transformation = {\n  id: SCALE_Y,\n  transformation: ({ args }) => {\n    const {\n      points = [],\n      scale_y = 1\n    } = args\n\n    return points.map((point, index) => ({\n      x: point.x,\n      y: Math.floor(point.y * scale_y),\n      type: index === 0 ? MOVE_TO : LINE_TO\n    }))\n  }\n}","import { ARC, CIRCLE, MOVE_TO } from '../constants'\nimport { Transformation } from '../types'\n\nexport const circle: Transformation = {\n  id: CIRCLE,\n  transformation: ({ args }) => {\n    const {\n      index_distance = 0,\n      points = []\n    } = args\n\n    const numPoints = points.length\n\n    if (numPoints > 1) {\n      const startPoint = points[0]\n      const endPoint = points[1]\n      const midPoint = {\n        x: (endPoint.x + startPoint.x) / 2,\n        y: (endPoint.y + startPoint.y) / 2\n      }\n\n      const distance = Math.sqrt(Math.pow(endPoint.x - startPoint.x, 2) + Math.pow(endPoint.y - startPoint.y, 2)) + index_distance\n\n      return [\n        {\n          x: midPoint.x,\n          y: midPoint.y,\n          type: MOVE_TO\n        }, {\n          x: midPoint.x,\n          y: midPoint.y,\n          radius: distance,\n          type: ARC,\n        }\n      ]\n    }\n\n    return []\n  }\n}","import {\n  // ADD_RULE,\n  ADD_TRANSFORMATION,\n  // DELETE_RULE,\n  DISTANCE,\n  // EDIT_RULE,\n  SET_INDEX_BASED,\n  INDEX_BASED,\n  TRANSFORMATIONS,\n  SET_DISTANCE\n} from '../constants'\n\nimport { TRANSFORMATION_PRESETS } from '../components/Transformations'\nimport { Action } from '../types'\n\nexport const transformation = <T extends unknown>(state = {\n  [DISTANCE]: 10,\n  [TRANSFORMATIONS]: TRANSFORMATION_PRESETS\n}, action: Action<T>) => {\n  switch (action.type) {\n    case SET_INDEX_BASED:\n      return {\n        ...state,\n        [INDEX_BASED]: action[INDEX_BASED]\n      }\n    case ADD_TRANSFORMATION:\n      return {\n        ...state,\n        [INDEX_BASED]: action[INDEX_BASED]\n      }\n    case SET_DISTANCE:\n      return {\n        ...state,\n        [DISTANCE]: action[DISTANCE]\n      }\n    // case ADD_RULE:\n    //   return {\n    //     ...state,\n    //   }\n    // case DELETE_RULE:\n    //   return {\n    //     ...state,\n    //   }\n    // case EDIT_RULE:\n    //   return {\n    //     ...state,\n    //   }\n    default:\n      return state\n  }\n}","import { combineReducers } from 'redux'\nimport { canvas } from './canvasReducer'\nimport { matrix } from './matrixReducer'\nimport { configuration } from './configurationReducer'\nimport { transformation } from './transformationReducer'\n\nconst reducers = combineReducers({\n  canvas,\n  configuration,\n  matrix,\n  transformation\n});\n\nexport type State = ReturnType<typeof reducers>\n\nexport default reducers","import {\n  M, N,\n  SET_M,\n  SET_N\n} from '../constants'\nimport { Action } from '../types'\n\nexport const matrix = <T extends unknown>(state = {\n  [M]: 3,\n  [N]: 3\n}, action: Action<T>) => {\n  switch (action.type) {\n    case SET_M:\n      return {\n        ...state,\n        [M]: action[M]\n      }\n    case SET_N:\n      return {\n        ...state,\n        [N]: action[N]\n      }\n    default:\n      return state\n  }\n}","import { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from './reducers/rootReducer'\n\nconst configureStore = (initialState = {}) =>\n  createStore(\n    rootReducer,\n    initialState,\n    applyMiddleware(thunk)\n  )\n\nexport default configureStore","const baseServer = \"https://mapo-survey-mongodb-api.vercel.app/\";\r\nconst apiServer = baseServer + \"api/\";\r\n\r\nexport {baseServer, apiServer};","import {apiServer} from \"./uri\";\n\nexport async function getRandomStyle(uid : any) {\n const latent = []\n for (let i = 0; i < 3; ++i) {\n   const val = Math.random() * 3 - 1.5\n   latent.push(val)\n }\n return fetch(apiServer + \"getStyle\", {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      userId: uid,\n      latentVec: latent\n    })\n  });\n}\n\nexport async function getStyleWithLatentVec(uid : any, latentVec : Array<number>) {\n  return fetch(apiServer + \"getStyle\", {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      userId: uid,\n      latentVec: latentVec,\n    })\n  });\n}","/*\r\n  API usage:\r\n  ---------------------------------\r\n  POST /api/survey\r\n  userId\r\n  surveyId\r\n  answer\r\n  dateTime\r\n  ---------------------------------\r\n  POST /api/uploadSketch\r\n  userId\r\n  sequence\r\n  dateTime\r\n\r\n  Besides the mandatory fields, any data can be sent in the posted Json - just add in the body section\r\n  I add a \"test\" field temporarily for development usage. Data with test label in MongoDB will be deleted later\r\n*/\r\n\r\nimport {apiServer} from \"./uri\";\r\n\r\nexport async function sendQuestion(uid : string, surveyId : string | number, answer : string | number, test : boolean = false) {\r\n return fetch(apiServer + \"survey\", {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({\r\n      userId: uid,\r\n      surveyId: surveyId,\r\n      answer: answer,\r\n      dateTime: new Date().toUTCString(),\r\n      test: test\r\n      // to add extra fields, just add here\r\n    })\r\n  });\r\n}\r\n\r\nexport async function sendSketch(uid : string, sequence : string, test : boolean = false) {\r\n  return fetch(apiServer + \"uploadSketch\", {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({\r\n      userId: uid,\r\n      sequence: sequence,\r\n      dateTime: new Date().toUTCString(),\r\n      test: test\r\n      // to add extra fields, just add here\r\n    })\r\n  });\r\n}","export const DRAWING_TASKS = ['an apple', 'a tree', 'a heart', 'a house', 'a sheep']\r\n\r\nexport const PARAMETERS_GROUP = {\r\n    'control': {\r\n        strength: 0,\r\n        sampleInterval: 2\r\n    },\r\n    'weak': {\r\n        strength: 1,\r\n        sampleInterval: 2.5\r\n    },\r\n    'strong': {\r\n        strength: 5,\r\n        sampleInterval: 4\r\n    }\r\n}","export const theme = {\n  breakpoints: [\"40em\", \"52em\", \"64em\"],\n  fontSizes: [12, 14, 16, 20, 24, 32, 48, 64],\n  colors: {\n    black: \"#000\",\n    blue: \"#07c\",\n    lightgray: \"#f6f6ff\",\n    grey: [\n      \"#ccc\"\n    ]\n  },\n  space: [0, 4, 8, 16, 32, 64, 128, 256],\n  fonts: {\n    body: \"system-ui, sans-serif\",\n    heading: \"inherit\",\n    monospace: \"Menlo, monospace\"\n  },\n  fontWeights: {\n    body: 400,\n    heading: 700,\n    bold: 700\n  },\n  lineHeights: {\n    body: 1.5,\n    heading: 1.25\n  },\n  shadows: {\n    small: \"0 0 4px rgba(0, 0, 0, .125)\",\n    large: \"0 0 24px rgba(0, 0, 0, .125)\"\n  },\n  variants: {},\n  text: {},\n  buttons: {\n    primary: {\n      color: \"white\",\n      bg: \"primary\"\n    }\n  }\n};\n","import { theme } from './theme'\n\nexport const defaultFontProps = {\n    fontFamily: \"sans-serif\",\n    fontSize: 1\n}\n\nexport const BLACK = theme.colors.black\nexport const GRAY = theme.colors.grey[0]","import React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react'\nimport {\n  ConnectedProps,\n  connect,\n  useDispatch,\n  useSelector\n} from 'react-redux'\n// import debounce from 'lodash.debounce'\n// import throttle from 'lodash.throttle'\nimport update from 'react-addons-update'\nimport {\n  Box,\n  Button,\n  Flex,\n  Text\n} from 'rebass'\n\nimport { \n  generateUID, \n  getRandomStyle,\n  sendSketch,\n  DRAWING_TASKS,\n  PARAMETERS_GROUP\n} from '../survey'\n\nimport { BLACK, GRAY, defaultFontProps } from '../styling'\nimport { Coordinate, Plane as PlaneID } from '../types'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { State } from '../reducers'\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\n\nconst DEBUG = true\n\ntype Props = {\n  width: number\n  height: number\n} & ConnectedProps<typeof connector>\n\n\nexport type DrawParameters = {\n  canvas: HTMLCanvasElement\n  filter?: string\n  n?: number\n  transformation?: ({ x, y }: Coordinate) => Coordinate\n}\n\nexport const eraseCanvas = (canvasRef: React.RefObject<HTMLCanvasElement>) => {\n  if (!canvasRef || !canvasRef.current)\n    return\n\n  const canvas: HTMLCanvasElement = canvasRef.current\n  const context = canvas.getContext('2d')\n\n  if (!!context) {\n    context.clearRect(0, 0, canvas.width, canvas.height)\n  }\n}\n\nfunction shuffleArray(array) {\n  array = array.slice()\n  for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n  }\n  return array\n}\n\nconst TASKS = shuffleArray(DRAWING_TASKS).slice(0, 3)\nconst PROMPTS = {\n  1: \"Please draw \" + TASKS[0],\n  2: \"Please draw \" + TASKS[1],\n  3: \"Please draw \" + TASKS[2]\n}\nconst SECTION_PARAMETERS = {\n  1: 'control',\n  2: 'weak',\n  3: 'strong'\n}\n\nconst Base: React.FC<Props> = ({\n  width,\n  height,\n}) => {\n  const [isPainting, setIsPainting] = useState(false)\n  const [erase, setErase] = useState(false);\n  const [strength, setStrength] = useState(0)\n  const [userId, setUserId] = useState(generateUID())\n  const [styleData, setStyleData] = useState<any>()\n  const [styleIndex, setStyleIndex] = useState(0)\n  const [sampleInterval, setSampleInterval] = useState(2)\n  const [reloadStyle, setReloadStyle] = useState(false)\n  const [cursorStyle, setCursorStyle] = useState('auto')\n  const [section, setSection] = useState<number>(1);\n  const [lastMousePosition, setLastMousePosition] = useState<Coordinate | undefined>(undefined)\n  const [showConfirm, setShowConfirm] = useState(false)\n  const [showEnding, setShowEnding] = useState(false)\n  const [submission, setSubmission] = useState<any>({\n    1: false,\n    2: false,\n    3: false\n  })\n  const [sequence, setSequence] = useState([])\n  const [copied, setCopied] = useState(false)\n\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n\n  const [curve, setCurve] = useState({\n    direction: {x:0, y:0},\n    lastStroke: {x:0, y:0},\n    strokeDirection: {x:0, y:0},\n    remainingDist: 0\n  })\n\n  const eraseSurveyCanvas = (canvasRef: React.RefObject<HTMLCanvasElement>) => {\n    if (!canvasRef || !canvasRef.current)\n      return\n  \n    const canvas: HTMLCanvasElement = canvasRef.current\n    const context = canvas.getContext('2d')\n  \n    if (!!context) {\n      context.clearRect(0, 0, canvas.width, canvas.height)\n    }\n\n    setSequence(_ => [])\n  }\n\n  const ACTIONS = [\n    {\n      id: 1,\n      text: \"Section 1\",\n      fx: () => { tryChangeSection(1) }\n    },\n    {\n      id: 2,\n      text: \"Section 2\",\n      fx: () => { tryChangeSection(2) }\n    },\n    {\n      id: 3,\n      text: \"Section 3\",\n      fx: () => { tryChangeSection(3) }\n    }\n  ]\n\n  useEffect(() => {\n    if (section > 3) {\n      setShowConfirm(false)\n      setShowEnding(true)\n      uploadResults()\n      return\n    }\n    setStrength(PARAMETERS_GROUP[SECTION_PARAMETERS[section]].strength)\n    setSampleInterval(PARAMETERS_GROUP[SECTION_PARAMETERS[section]].sampleInterval)\n  }, [section])\n  \n  useEffect(() => {\n    eraseSurveyCanvas(canvasRef)\n    setErase(false)\n  }, [erase])\n\n  const tryChangeSection = (i : number) => {\n    if (i === section) return;\n    if (!submission[i]) {\n      setShowConfirm(true);\n    }\n  }\n\n  const uploadResults = () => {\n    console.log('upload results...')\n    console.log(submission);\n    sendSketch(userId, JSON.stringify(submission), DEBUG)\n  }\n\n  useEffect(() => {\n\n  }, [showEnding])\n\n  const submit = () => {\n    const newSubmission = JSON.parse(JSON.stringify(submission))\n    newSubmission[section] = {\n      sequence: sequence.slice(),\n      strength: strength,\n      sampleInterval: sampleInterval,\n      styles: styleData\n    };\n    console.log('current submission')\n    console.log(newSubmission)\n    setSubmission(newSubmission)\n\n    eraseSurveyCanvas(canvasRef)\n\n    setSection(section + 1)\n    setShowConfirm(false)\n  }\n\n  useEffect(() => {\n    getRandomStyle(userId).then(res => res.json()).then(res => {\n      var styles = {dx: [], dy: [], z_0: 0, z_1: 0, z_2: 0}\n      res.dx.split(',').forEach((element: string) => {\n        styles.dx.push(parseFloat(element))\n      });\n      res.dy.split(',').forEach((element: string) => {\n        styles.dy.push(parseFloat(element))\n      });\n      styles.z_0 = res.z_0;\n      styles.z_1 = res.z_1;\n      styles.z_2 = res.z_2;\n      setStyleData(_ => styles)\n      \n    });\n    setReloadStyle(false)\n  }, [reloadStyle, erase])\n\n  const onMouseDown = useCallback((event: MouseEvent) => {\n    if (!canvasRef || !canvasRef.current || showConfirm)\n        return\n    const coordinates = getCoordinates(event)\n    const canvas: HTMLCanvasElement = canvasRef.current\n    const context = canvas.getContext('2d')\n    if (!!coordinates && !!context) {\n      const newCurve = curve\n\n      const pos = applyStyle(coordinates, newCurve.direction, styleIndex)\n      newCurve.remainingDist = 0\n      newCurve.lastStroke = pos\n      context.beginPath()\n      context.moveTo(pos.x, pos.y)\n      const now = Date.now()\n      setSequence([...sequence, {type: 'start', x: pos.x, y: pos.y, t: now}])\n\n      setCurve(newCurve)\n      setIsPainting(true)\n\n      // hide cursor\n      setCursorStyle('none');\n      \n    }\n  },[styleIndex, styleData, curve, sequence, showConfirm])\n\n  const onMouseMove = useCallback((event: MouseEvent) => {\n    if (!canvasRef || !canvasRef.current || showConfirm)\n        return\n\n    const pos = getCoordinates(event)\n    setLastMousePosition(pos)\n\n    const newCurve = curve\n\n    if (!!pos && !!lastMousePosition) {\n      const dir = getDir(lastMousePosition, pos)\n      newCurve.direction = dir\n      if (!isPainting) newCurve.strokeDirection = dir\n    }\n    if (isPainting) {\n      const canvas: HTMLCanvasElement = canvasRef.current\n      const context = canvas.getContext('2d')\n      if (!context) return\n\n      const dist = getDistance(pos, lastMousePosition)\n      newCurve.remainingDist += dist\n      const totalDist = newCurve.remainingDist\n      let newIndex = styleIndex\n      while (newCurve.remainingDist > sampleInterval) {\n\n        const ratio = (totalDist - newCurve.remainingDist) / totalDist\n        const dir = normalize(lerpVector(curve.direction, newCurve.direction, ratio))\n        let newPos = applyStyle(pos, dir, newIndex)\n        //newCurve.strokeDirection = getDir(newCurve.lastStroke, newPos)\n        //const temp = lerpVector(newCurve.lastStroke, lastMousePosition, 0.5)\n        //context.quadraticCurveTo(temp.x, temp.y, newPos.x, newPos.y)\n        newPos = lerpVector(newCurve.lastStroke, newPos, 0.3)\n        context.lineTo(newPos.x, newPos.y)\n        context.stroke()\n\n        const now = Date.now()\n        setSequence([...sequence, \n          {type: 'lineTo', x: newPos.x, y: newPos.y, t: now}, \n          {type: 'mouseTo', x: pos.x, y: pos.y, t: now}])\n\n        newCurve.lastStroke = newPos\n        newIndex = newIndex < styleData.dx.length ? newIndex + 1 : 0\n        newCurve.remainingDist -= sampleInterval\n        newCurve.lastStroke = newPos\n      }\n      setStyleIndex(newIndex)\n      setCurve(newCurve)\n    }\n  }, [styleIndex, styleData, curve, isPainting, lastMousePosition, sequence, showConfirm])\n  \n  const onMouseUp = useCallback((event: MouseEvent) => {\n    if (!canvasRef || !canvasRef.current || showConfirm)\n      return\n    \n    const coordinates = getCoordinates(event)\n    const canvas: HTMLCanvasElement = canvasRef.current\n    const context = canvas.getContext('2d')\n\n    if (!context) return\n\n    if (!!coordinates && isPainting) {\n      const pos = applyStyle(coordinates, curve.direction, styleIndex)\n      //context.quadraticCurveTo(curve.lastStroke.x, curve.lastStroke.y, pos.x, pos.y)\n      context.lineTo(pos.x, pos.y)\n      context.stroke()\n\n      const now = Date.now()\n      setSequence([...sequence, \n        {type: 'lineTo', x: pos.x, y: pos.y, t: now}, \n        {type: 'mouseTo', x: coordinates.x, y: coordinates.y, t: now},\n        {type: 'end', t: now}\n      ])\n    }\n    context.closePath()\n\n    setIsPainting(false)\n    // show cursor\n    setCursorStyle('auto');\n  }, [styleIndex, styleData, curve, isPainting, sequence, showConfirm])\n\n  const onMouseLeave = useCallback((event: MouseEvent) => {\n    onMouseUp(event)\n  }, [styleIndex, styleData, curve, isPainting, sequence, showConfirm ])\n\n  useEffect(() => {\n    if (!canvasRef || !canvasRef.current)\n        return\n    const canvas: HTMLCanvasElement = canvasRef.current\n    const context = canvas.getContext('2d')\n    Object.assign(context, {\n      lineJoin: 'round',\n      lineWidth: 0.8,\n      strokeStyle: BLACK\n    })\n    canvas.addEventListener('mousedown', onMouseDown)\n\n    return () => {\n      canvas.removeEventListener('mousedown', onMouseDown)\n    }\n  }, [onMouseDown])\n\n  useEffect(() => {\n    if (!canvasRef || !canvasRef.current)\n        return\n    const canvas: HTMLCanvasElement = canvasRef.current\n    canvas.addEventListener('mousemove', onMouseMove)\n\n    return () => {\n      canvas.removeEventListener('mousemove', onMouseMove)\n    }\n  }, [onMouseMove])\n  \n  useEffect(() => {\n    if (!canvasRef || !canvasRef.current)\n        return\n    const canvas: HTMLCanvasElement = canvasRef.current\n    canvas.addEventListener('mouseleave', onMouseLeave)\n    canvas.addEventListener('mouseup', onMouseUp)\n\n    return () => {\n      canvas.removeEventListener('mouseleave', onMouseLeave)\n      canvas.removeEventListener('mouseup', onMouseUp)\n    }\n  }, [onMouseUp])\n\n  const getCoordinates = (event: MouseEvent) => {\n    const canvas: HTMLCanvasElement | null = canvasRef.current\n    return {\n      x: event.pageX - canvas.offsetLeft,\n      y: event.pageY - canvas.offsetTop\n    }\n  }\n\n  const applyStyle = (pos : Coordinate, dir : Coordinate, index : number): Coordinate => {\n    const sx : number = styleData.dx[index]\n    const sy : number = styleData.dy[index]\n    const bitang = {x: -dir.y, y: dir.x}\n    return {\n      x: pos.x + (dir.x * sx + bitang.x * sy) * strength, \n      y: pos.y + (dir.y * sx + bitang.y * sy) * strength\n    }\n  }\n\n  const getDistance = (a : Coordinate, b : Coordinate) => {\n    const d2 = (a.x - b.x) ** 2 + (a.y - b.y) ** 2\n    return d2 > 0 ? Math.sqrt(d2) : 0\n  }\n\n  const lerpVector = (a : Coordinate, b : Coordinate, t : number) => {\n    return {\n      x : a.x + (b.x - a.x)*t,\n      y : a.y + (b.y - a.y)*t\n    }\n  }\n\n  const normalize = (a : Coordinate) => {\n    const len2 = a.x * a.x + a.y * a.y\n    if (len2 > 1e-8) {\n      const len = Math.sqrt(len2)\n      a.x /= len; a.y /= len;\n    }\n    return a\n  }\n\n  const getDir = (from : Coordinate, to : Coordinate) => {\n    const dir = {x: to.x - from.x, y: to.y - from.y}\n    const len2 = dir.x * dir.x + dir.y * dir.y\n    if (len2 > 1e-8) {\n      const len = Math.sqrt(len2)\n      dir.x /= len;\n      dir.y /= len;\n    }\n    return dir\n  }\n\n  const menuStyles = {\n    borderColor: \"transparent\",\n    borderStyle: \"solid\",\n    borderWidth: \"1px\",\n    ':hover': {\n      background: \"white\",\n      borderColor: GRAY,\n      color: \"black\",\n      cursor: \"pointer\",\n      transition: \"0.3s\"\n\n    }\n  }\n\n  return <>\n    {showConfirm && \n      <Flex width={0.5} \n        display='block' \n        style={{\n          background: '#f0f0f0',\n          position: 'fixed',\n          left: '50%',\n          top: '50%',\n          transform: 'translate(-50%, -50%)'\n        }}>\n      <Box\n        fontSize={3}>\n        Are you sure submit current section? After you submit, please go back to the Google Form to answer the Questionnaire Section {section}.\n        <br></br>\n        <Flex>\n          <Box width={1/2}>\n          <Button display='block' margin='auto'\n            bg='grey'\n            {...defaultFontProps}\n            sx={menuStyles}\n            onClick={() => {setShowConfirm(false)}}>Return</Button>\n          </Box>\n          <Box width={1/2}>\n          <Button display='block' margin='auto'\n            bg='blue'\n            {...defaultFontProps}\n            sx={menuStyles}\n            onClick={() => {submit()}}>Submit</Button>\n          </Box>\n        </Flex>\n        \n        \n      </Box>\n      </Flex>\n      \n    }\n    {showEnding &&\n      <Flex width={0.5} \n        display='block' \n        style={{\n          background: '#f0f0f0',\n          position: 'fixed',\n          left: '50%',\n          top: '50%',\n          transform: 'translate(-50%, -50%)'\n      }}>\n        <Box>\n          Thanks for finishing the drawing tasks. Now please go back to the Google Form to answer the remaining questionnaire. \n          <br></br>\n          Make sure to include your unique survey ID <b>{userId}</b> in the form.\n          <CopyToClipboard \n            text={userId}\n            style={{\n              display: 'block',\n              margin: 'auto'\n            }}\n            >\n          <button>Copy to clipboard</button>\n          </CopyToClipboard>\n          {copied && <Text color='blue' fontSize='12px'>Copied!</Text>}\n        </Box>\n      </Flex>\n    }\n    {\n      <Flex width={width} margin='auto'>\n        <Box margin='auto' display='block'>\n        {\n          ACTIONS.map((action) =>\n          <Button\n            key={action.text}\n            onClick={action.fx}\n            bg={action.id === section ? 'blue' : 'gray'}\n            mb={3}\n            mr={2}\n            {...defaultFontProps}\n            sx={menuStyles}\n          >{action.text}</Button>\n          )\n        }\n        </Box>\n      </Flex>\n      \n    }\n    {!showEnding &&\n    <>\n          <Box margin='auto' display='block'>\n            <Text fontSize='17px' textAlign='center'>{PROMPTS[section]}</Text>\n          </Box>\n          {!!!submission[section] && !showEnding &&\n            <>\n              <br></br>\n              <Flex width={width} margin='auto'>\n              <Box width={1/2}>\n                <Button \n                  margin='auto'  \n                  display='block'\n                  backgroundColor='lightblue' \n                  {...defaultFontProps}\n                  sx={menuStyles}\n                  onClick={() => setErase(true)}>Erase\n                </Button>\n              </Box>\n\n              <Box width={1/2}>\n              <Button \n                margin='auto'  \n                display='block'\n                backgroundColor='blue' \n                {...defaultFontProps}\n                sx={menuStyles}\n                onClick={() => tryChangeSection(section+1)}>Submit\n                </Button>\n              </Box>\n\n              </Flex>\n              \n            </>\n            }\n            {!!submission[section] && !showEnding &&\n              <Text>You have finished this section</Text>\n            }\n            <br></br>\n          <canvas\n              ref={canvasRef}\n              height={height}\n              width={width}\n              style={{\n                border: `1px solid ${BLACK}`,\n                borderRadius: \"3px\",\n                margin: 'auto',\n                display: 'block',\n                cursor: cursorStyle\n              }}\n            />\n    </>\n    }\n      \n  </>\n}\n\nconst mapState = (state: State) => state\n\nconst mapDispatch = {}\n\nconst connector = connect(mapState, mapDispatch)\n\nexport const Sketch = connector(Base)","\n// https://www.w3resource.com/javascript-exercises/javascript-math-exercise-23.php\nexport function generateUID() {\n  var dt = new Date().getTime();\n  var uuid = 'xx-4xxx-yxxx-xxxx'.replace(/[xy]/g, function(c) {\n      var r = (dt + Math.random()*16)%16 | 0;\n      dt = Math.floor(dt/16);\n      return (c=='x' ? r :(r&0x3|0x8)).toString(16);\n  });\n  return uuid;\n}","import {\n  DATA_FORMAT,\n  NUM_LINES,\n  M,\n  N,\n  X,\n  Y,\n  AMPLITUDE,\n  FREQUENCY,\n  SET_NUM_LINES,\n  SET_M,\n  SET_N,\n  SET_X,\n  SET_Y,\n  DELAY,\n  SET_DELAY,\n  SET_AMPLITUDE,\n  SET_FREQUENCY,\n  SET_DATA_FORMAT\n} from '../constants'\nimport { DrawValues } from '../types'\n\nexport const setM = (value: DrawValues[typeof M]) => ({\n  type: SET_M,\n  [M]: value\n})\n\nexport const setN = (value: DrawValues[typeof N]) => ({\n  type: SET_N,\n  [N]: value\n})\n\nexport const setX = (value: number) => ({\n  type: SET_X,\n  [X]: value\n})\n\nexport const setY = (value: number) => ({\n  type: SET_Y,\n  [Y]: value\n})\n\nexport const setDelay = (value: number) => ({\n  type: SET_DELAY,\n  [DELAY]: value\n})\n\nexport const setNumLines = (value: number) => ({\n  type: SET_NUM_LINES,\n  [NUM_LINES]: value\n})\n\nexport const setAmplitude = (value: number) => ({\n  type: SET_AMPLITUDE,\n  [AMPLITUDE]: value\n})\n\nexport const setFrequency = (value: number) => ({\n  type: SET_FREQUENCY,\n  [FREQUENCY]: value\n})\n\nexport const setDataFormat = (value: number) => ({\n  type: SET_DATA_FORMAT,\n  [DATA_FORMAT]: value\n})","import {\n  NUM_SEGMENTS,\n  POINT,\n  TIMESTAMP,\n  SEGMENTS,\n  SET_NUM_SEGMENTS,\n  ADD_POINT,\n  ADD_SEGMENT,\n  ADD_TIMESTAMP,\n  RESET_DATA\n} from '../constants'\nimport { Coordinate } from '../types'\n\nexport const addPoint = (point: Coordinate) => ({\n  type: ADD_POINT,\n  [POINT]: point\n})\n\nexport const resetData = () => ({\n  type: RESET_DATA,\n})\n\nexport const addTimestamp = (timestamp: number) => ({\n  type: ADD_TIMESTAMP,\n  [TIMESTAMP]: timestamp\n})\n\nexport const setSegments = (segments: number) => ({\n  type: SET_NUM_SEGMENTS,\n  [NUM_SEGMENTS]: segments\n})\n\nexport const addSegment = () => ({\n  type: ADD_SEGMENT,\n})","import React, { useEffect, useRef } from 'react'\nimport { connect, ConnectedProps, useDispatch, useSelector } from 'react-redux'\nimport { eraseCanvas } from './Sketch'\nimport {\n  ADD_POINT,\n  AVERAGE_X,\n  AVERAGE_Y\n} from '../constants'\nimport { addPoint } from '../actions'\nimport { Coordinate } from '../types'\nimport { GRAY } from '../styling'\nimport { State } from '../reducers'\n\ntype Props = {\n  erase: boolean\n  height: number\n  width: number\n  margin: number\n  mousePosition: Coordinate | undefined\n  originalMousePosition: Coordinate | undefined\n} & ConnectedProps<typeof connector>\n\nconst iterations = Math.floor(Math.random() * 8) + 1\nconst iterationsArray = [...Array(iterations)]\n\nconst Base: React.FC<Props> = ({\n  canvas,\n  erase,\n  height,\n  width,\n  mousePosition,\n  originalMousePosition\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n\n  const dispatch = useDispatch()\n\n  const xAverage = useSelector(() => canvas[AVERAGE_X])\n  const yAverage = useSelector(() => canvas[AVERAGE_Y])\n\n  const drawAverage = () => {\n    if (!canvasRef || !canvasRef.current || !originalMousePosition || !mousePosition)\n      return\n\n    const canvas: HTMLCanvasElement = canvasRef.current\n    const context = canvas.getContext('2d')\n\n    if (!!context && !!xAverage && !!yAverage) {\n      iterationsArray.map((_, index) => {\n\n        Object.assign(context, {\n          lineJoin: 'round',\n          lineWidth: 0.3,\n        })\n\n        context.strokeStyle = \"rgba(0, 0, 0, 0.3)\"\n        context.beginPath()\n        context.moveTo(xAverage - 10, yAverage - 10)\n        context.lineTo(xAverage, yAverage)\n        context.closePath()\n        context.stroke()\n      })\n    }\n  }\n\n  useEffect(() => {\n    if (mousePosition !== undefined) {\n      dispatch(addPoint(mousePosition))\n    }\n\n    drawAverage()\n  }, [originalMousePosition])\n\n  useEffect(() => {\n    eraseCanvas(canvasRef)\n  }, [erase])\n\n  return <canvas ref={canvasRef}\n    height={height}\n    width={width}\n    style={{\n      border: `1px solid ${GRAY}`,\n      borderRadius: \"5px\",\n      marginLeft: \"16px\"\n    }}\n  />\n}\n\nconst mapState = (state: State) => ({\n  canvas: state.canvas\n})\n\nconst mapDispatch = {}\n\nconst connector = connect(mapState, mapDispatch)\n\nexport const Average = connector(Base)","import React, {\n  useEffect,\n  useRef\n} from 'react'\nimport { connect, ConnectedProps, useSelector } from 'react-redux'\nimport { eraseCanvas } from './Sketch'\nimport {\n  AMPLITUDE,\n  FREQUENCY,\n  DELAY,\n  SIN,\n  COS,\n  X,\n  Y\n} from '../constants'\nimport { Coordinate } from '../types'\n// import debounce from 'lodash.debounce'\nimport { State } from '../reducers'\nimport { GRAY } from '../styling'\n\ntype Props = {\n  erase: boolean\n  index: number\n  height: number\n  width: number\n  margin: number\n  mousePosition: Coordinate | undefined\n  originalMousePosition: Coordinate | undefined\n  scalingFactor: number\n  waveStyle?: typeof SIN | typeof COS\n  direction?: typeof X | typeof Y\n} & ConnectedProps<typeof connector>\n\nconst Base: React.FC<Props> = ({\n  configuration,\n  erase,\n  index,\n  height,\n  width,\n  margin,\n  mousePosition,\n  originalMousePosition,\n  scalingFactor,\n  waveStyle,\n  direction\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const delay = useSelector(() => configuration[DELAY]) * 100\n  const amplitude = useSelector(() => configuration[AMPLITUDE])\n  const frequency = useSelector(() => configuration[FREQUENCY])\n\n  useEffect(() => {\n    eraseCanvas(canvasRef)\n  }, [erase])\n\n  const drawLine = () => {\n\n    if (!canvasRef || !canvasRef.current)\n      return\n\n    const canvas: HTMLCanvasElement = canvasRef.current\n\n    const context = canvas.getContext('2d')\n\n    if (context) {\n      Object.assign(context, {\n        lineJoin: 'round',\n        lineWidth: 0.1,\n        strokeStyle: \"#000\"\n      })\n\n      context.beginPath()\n\n      const draw = () => {\n        if (!!originalMousePosition && !!mousePosition) {\n          const tfx = (coordinate: Coordinate | undefined) => {\n\n            if (!coordinate)\n              return { x: null, y: null }\n\n            const { x: xOriginal, y: yOriginal } = coordinate\n            const wave = waveStyle === SIN ? Math.sin : Math.cos\n\n            const x = (height / 2 +\n              (amplitude * index) * wave(yOriginal / (frequency * index)\n              )) + xOriginal\n\n            const y = (height / 2 +\n              (amplitude * index) * wave(xOriginal / (frequency * index)\n              )) + yOriginal\n\n            return {\n              x: (direction === X ? xOriginal : x) / scalingFactor,\n              y: (direction === Y ? yOriginal : y) / scalingFactor\n            }\n          }\n\n          const { x: xMoveTo, y: yMoveTo } = tfx(originalMousePosition)\n          const { x: xLineTo, y: yLineTo } = tfx(mousePosition)\n\n          if (!!xMoveTo && !!yMoveTo && !!xLineTo && !!yLineTo) {\n            context.moveTo(xMoveTo, yMoveTo)\n            context.lineTo(xLineTo, yLineTo)\n            context.closePath()\n            context.stroke()\n          }\n        }\n      }\n\n      delay !== 0\n        ? setTimeout(() => { draw() }, delay * index)\n        : draw()\n    }\n  }\n\n  useEffect(() => {\n    drawLine()\n  }, [originalMousePosition])\n\n\n  return <canvas\n    height={height}\n    width={width}\n    ref={canvasRef}\n    style={{\n      border: `1px solid ${GRAY}`,\n      marginRight: `${margin}px`,\n      borderRadius: \"3px\",\n    }}\n  />\n}\n\nconst mapState = (state: State) => state\nconst mapDispatch = {}\nconst connector = connect(mapState, mapDispatch)\n\nexport const Canvas = connector(Base)","import React from 'react'\nimport {\n  connect,\n  ConnectedProps,\n  useDispatch,\n  useSelector\n} from 'react-redux'\n\nimport { Flex, Text } from 'rebass'\nimport { Input, Label } from '@rebass/forms'\n\nimport { setM, setN } from '../actions'\nimport { defaultFontProps, GRAY } from '../styling'\nimport {\n  COLUMN,\n  NUMBER,\n  MATRIX_DIMENSIONS,\n  M,\n  N,\n  ROW\n} from '../constants'\nimport { State } from '../reducers'\n\ntype Props = {} & ConnectedProps<typeof connector>\n\nconst Base: React.FC<Props> = ({ matrix }) => {\n\n  const dispatch = useDispatch()\n\n  const MATRIX_CONFIG = [{\n    id: M,\n    action: setM,\n    value: useSelector(() => matrix[M])\n  }, {\n    id: N,\n    action: setN,\n    value: useSelector(() => matrix[N])\n  }] as const\n\n  return <Flex\n    flexDirection={[COLUMN, COLUMN, ROW]}\n    justifyContent=\"space-between\"\n    mb={3}\n  >\n    <Text\n      {...defaultFontProps}\n      py={2}\n    >\n      {MATRIX_DIMENSIONS}\n    </Text>\n\n    <Flex flexDirection={[COLUMN, COLUMN, ROW]}>\n      {\n        MATRIX_CONFIG.map(dim =>\n          <Flex\n            alignItems=\"center\"\n            flexDirection={ROW}\n            justifyContent=\"flex-start\"\n            ml={[0, 0, 3]}\n            mt={[2, 2, 0]}\n            width=\"10rem\"\n          >\n            <Label\n              {...defaultFontProps}\n              htmlFor={dim.id}\n              pb={2}\n              width=\"3rem\"\n            >\n              {`${dim.id} =`}\n            </Label>\n            <Input\n              name={dim.id}\n              min={0}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                dispatch(dim.action(parseInt(e.target.value, 10)))\n              }}\n              type={NUMBER}\n              value={dim.value}\n              sx={{\n                borderColor: GRAY,\n                borderRadius: \"5px\"\n              }}\n            />\n          </Flex>\n        )}\n    </Flex>\n  </Flex>\n}\n\nconst mapState = (state: State) => state\n\nconst mapDispatch = {}\n\nconst connector = connect(mapState, mapDispatch)\n\nexport const Matrix = connector(Base)\n","import React from 'react'\nimport {\n  connect,\n  ConnectedProps,\n  useDispatch,\n  useSelector\n} from 'react-redux'\nimport {\n  Box,\n  Flex,\n  Text\n} from 'rebass'\nimport {\n  Label,\n  Input\n} from '@rebass/forms'\n\nimport {\n  Matrix,\n  Module,\n  Transformations,\n} from './'\n\nimport {\n  AMPLITUDE,\n  ANCHOR_POINT,\n  COLUMN,\n  DATA_FORMAT,\n  DELAY,\n  DEFAULT_CONFIG,\n  FREQUENCY,\n  NUM_SEGMENTS,\n  NUMBER,\n  X,\n  Y,\n  ROW,\n  TRANSFORMATIONS,\n} from '../constants'\nimport {\n  setX,\n  setY,\n  setAmplitude,\n  setFrequency,\n  setDelay,\n  // setDistance,\n  // setNumLines,\n  setSegments,\n  setDataFormat\n} from '../actions'\n\nimport {\n  defaultFontProps,\n  GRAY,\n} from '../styling'\nimport { State } from '../reducers'\n\ntype Props = {} & ConnectedProps<typeof connector>\n\nexport const Base: React.FC<Props> = ({ configuration }) => {\n  const dispatch = useDispatch()\n\n  const ANCHOR_POINT_CONFIG = [{\n    id: X,\n    action: setX,\n    value: useSelector(() => configuration[X])\n  }, {\n    id: Y,\n    action: setY,\n    value: useSelector(() => configuration[Y])\n  }] as const\n\n  const DEFAULT_CONFIG_OPTIONS = [{\n    id: AMPLITUDE,\n    action: setAmplitude,\n    value: useSelector(() => configuration[AMPLITUDE])\n  }, {\n    id: FREQUENCY,\n    action: setFrequency,\n    value: useSelector(() => configuration[FREQUENCY])\n  }, {\n    id: DELAY,\n    action: setDelay,\n    value: useSelector(() => configuration[DELAY])\n  }, {\n    id: NUM_SEGMENTS,\n    action: setSegments,\n    value: useSelector(() => configuration[NUM_SEGMENTS])\n  }, {\n    id: DATA_FORMAT,\n    action: setDataFormat,\n    value: useSelector(() => configuration[DATA_FORMAT]),\n  }]\n\n  // const TRANSFORMATION_OPTIONS = [{\n  //   id: DISTANCE,\n  //   action: setDistance,\n  //   value: useSelector(() => transformation[DISTANCE]),\n\n  // }]\n\n  return <Box\n    display={[\"none\", \"none\", \"block\"]}\n    ml={3} width=\"100%\">\n    <Module\n      defaultVisibility\n      heading={DEFAULT_CONFIG}\n    >\n      <Flex\n        flexDirection={[COLUMN, COLUMN, ROW]}\n        justifyContent=\"space-between\"\n        mb={3}\n      >\n        <Text\n          {...defaultFontProps}\n          py={2}\n        >\n          {ANCHOR_POINT}\n        </Text>\n\n        <Flex\n          alignItems=\"center\"\n          flexDirection={ROW}\n        >\n          ({ANCHOR_POINT_CONFIG.map((anchor, index) =>\n          <Label\n            key={anchor.id}\n            htmlFor={anchor.id}\n            width=\"6rem\"\n          >\n            <Input\n              name={anchor.id}\n              min={0}\n              type={NUMBER}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                dispatch(anchor.action(parseInt(e.target.value, 10)))\n              }}\n              mx={2}\n              sx={{\n                borderColor: GRAY,\n                borderRadius: \"5px\"\n              }}\n              value={anchor.value}\n            />\n            {index === 0 ? <Flex\n              alignSelf=\"flex-end\"\n              pb={2}\n            >,</Flex> : null}\n          </Label>\n        )})\n        </Flex>\n      </Flex>\n\n      <Matrix />\n\n      {DEFAULT_CONFIG_OPTIONS.map((config, index) =>\n        <Flex flexDirection={ROW}\n          justifyContent=\"space-between\"\n          alignItems=\"center\"\n          mb={3}\n        >\n          <Text\n            {...defaultFontProps}\n            py={2}\n          >\n            {config.id}\n          </Text>\n          <Label\n            key={config.id}\n            htmlFor={config.id}\n            width=\"6rem\"\n          >\n            <Input\n              name={config.id}\n              min={0}\n              type={NUMBER}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                dispatch(config.action(parseInt(e.target.value, 10)))\n              }}\n              mx={2}\n              sx={{\n                borderColor: GRAY,\n                borderRadius: \"5px\"\n              }}\n              value={config.value}\n            />\n          </Label>\n        </Flex>\n      )}\n\n    </Module>\n\n    <Module\n      defaultVisibility\n      heading={TRANSFORMATIONS}\n    >\n      <Transformations />\n    </Module>\n  </Box >\n}\n\nconst mapState = (state: State) => state\n\nconst mapDispatch = {}\n\nconst connector = connect(mapState, mapDispatch)\n\nexport const Configuration = connector(Base)","import React from 'react'\nimport { Box, Button, Flex, Heading, Text } from 'rebass'\nimport { defaultFontProps, theme } from '../styling'\n\nexport const BUTTON = \"button\"\nexport const GRID = \"grid\"\n\nconst GRAY = theme.colors.grey[0]\n\ntype Props = {\n  active?: string\n  header?: string\n  items: any[]\n  style: typeof BUTTON | typeof GRID\n}\n\nexport const Menu: React.FC<Props> = ({\n  active,\n  header,\n  items,\n  style\n}) =>\n  <Box\n    display=\"block\"\n    pt={[3, 0, 0]}\n  >\n    {header && <Heading\n      {...defaultFontProps}\n      letterSpacing=\"0.1em\"\n      mb={3}\n      sx={{\n        textTransform: \"uppercase\"\n      }}\n    >{header}</Heading>}\n\n    <Flex\n      flexWrap=\"wrap\"\n    >\n\n      {style === GRID && items.map((item, index) =>\n        <Box\n          key={item.id}\n          {...defaultFontProps}\n          mb={3}\n          mr={2}\n          p={3}\n          width={150}\n          sx={{\n            borderRadius: \"3px\",\n            borderWidth: \"1px\",\n            borderStyle: \"solid\",\n            borderColor: GRAY,\n            fontWeight: item.id === active ? \"bold\" : \"normal\"\n          }}\n        >\n\n          <Text\n            {...defaultFontProps}\n            fontSize={1}\n          >\n            {item.id}\n          </Text>\n        </Box>\n      )}\n\n      {style === BUTTON && items.map((item, index) =>\n        <Button\n          key={item.id}\n          {...defaultFontProps}\n          bg=\"gray\"\n          mb={3}\n          mr={2}\n          sx={{\n            borderColor: \"transparent\",\n            borderStyle: \"solid\",\n            borderWidth: \"1px\",\n            ':hover': {\n              background: \"white\",\n              borderColor: GRAY,\n              color: \"black\",\n              cursor: \"pointer\",\n              transition: \"0.3s\"\n            }\n          }}\n        >{item.id}</Button>\n      )}\n    </Flex>\n  </Box>","\nimport React, { useState } from 'react'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { SlideDown } from 'react-slidedown'\nimport {\n  Box,\n  Button,\n  Flex,\n  Heading,\n} from 'rebass'\nimport {\n  defaultFontProps,\n  BLACK,\n  GRAY,\n} from '../styling'\n\ntype Props = {\n  heading: string\n  defaultVisibility?: boolean\n}\n\nexport const Module: React.FC<Props> = ({\n  children,\n  defaultVisibility = false,\n  heading\n}) => {\n\n  const [isVisible, setIsVisible] = useState(defaultVisibility)\n\n  return <Box\n    mb={3}\n    sx={{\n      borderBottomStyle: \"solid\",\n      borderBottomColor: GRAY,\n      borderBottomWidth: \"1px\"\n    }}\n  >\n    <Flex\n      alignItems=\"center\"\n      justifyContent=\"space-between\"\n    >\n      <Heading\n        {...defaultFontProps}\n        color={isVisible ? BLACK : GRAY}\n        py={3}\n        fontSize={2}\n        sx={{\n          transition: \"0.15s ease-in\"\n        }}\n      >\n        {heading}\n      </Heading>\n      <Button\n        onClick={() => { setIsVisible(!isVisible) }}\n        color={GRAY}\n        height=\"fit-content\"\n        px={2}\n        py={0}\n        sx={{\n          ':hover': {\n            color: BLACK,\n            cursor: 'pointer',\n            transition: \"0.3s ease-in\"\n          }\n        }}\n      >\n        <FontAwesomeIcon\n          icon={isVisible ? \"angle-up\" : \"angle-down\"}\n        />\n      </Button>\n    </Flex>\n\n    <SlideDown className=\"my-dropdown-slidedown\">\n      {isVisible && <Box>\n        {children}\n      </Box>}\n    </SlideDown>\n  </Box>\n\n}\n","import React, { useEffect, useRef } from 'react'\nimport { eraseCanvas } from './Sketch'\nimport { Coordinate } from '../types'\nimport { GRAY } from '../styling'\n\ntype Props = {\n  erase: boolean\n  height: number\n  width: number\n  margin: number\n  mousePosition: Coordinate | undefined\n  originalMousePosition: Coordinate | undefined\n}\n\nconst iterations = Math.floor(Math.random() * 8) + 1\nconst iterationsArray = [...Array(iterations)]\n\nexport const Shape: React.FC<Props> = ({\n  erase,\n  height,\n  width,\n  mousePosition,\n  originalMousePosition\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n\n  const drawShape = () => {\n    if (!canvasRef || !canvasRef.current || !originalMousePosition || !mousePosition)\n      return\n\n    const canvas: HTMLCanvasElement = canvasRef.current\n    const context = canvas.getContext('2d')\n\n\n    if (!!context) {\n      iterationsArray.map((_, index) => {\n\n        Object.assign(context, {\n          lineJoin: 'round',\n          lineWidth: 0.3,\n        })\n\n        const offset = (index * 2)\n\n        const { x: xMoveTo, y: yMoveTo } = originalMousePosition\n        const { x: xLineTo, y: yLineTo } = mousePosition\n        const sign = Math.pow(-1, index)\n\n        setTimeout(() => {\n          context.strokeStyle = \"transparent\"\n          context.fillStyle = \"rgba(0, 0, 0, 0.15)\"\n          context.fill()\n          context.beginPath()\n          context.moveTo(xMoveTo + (offset * sign), yMoveTo + (offset * sign))\n          context.arcTo(\n            xMoveTo,\n            yMoveTo,\n            xLineTo + offset,\n            yLineTo + offset,\n            (Math.random() * 20) + iterations\n          )\n          context.closePath()\n          context.stroke()\n\n        }, index * 100)\n      })\n\n      const fadeOut = () => {\n        context.fillStyle = \"rgba(255,255,255, 0.01)\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n      }\n\n      if (Math.random() > 0.85) {\n        fadeOut()\n      }\n    }\n  }\n\n  useEffect(() => {\n    drawShape()\n  }, [originalMousePosition])\n\n  useEffect(() => {\n    eraseCanvas(canvasRef)\n  }, [erase])\n\n  return <canvas ref={canvasRef}\n    height={height}\n    width={width}\n    style={{\n      border: `1px solid ${GRAY}`,\n      borderRadius: \"5px\",\n      marginLeft: \"16px\"\n    }}\n  />\n}","import React, {\n  useEffect,\n  useRef,\n  useState\n} from 'react'\nimport { connect, ConnectedProps, useSelector } from 'react-redux'\nimport { eraseCanvas } from './Sketch'\nimport {\n  ARC,\n  DELAY,\n  M,\n  SEGMENTS,\n  X,\n  Y,\n  POINTS,\n  NUM_SEGMENTS,\n  NUM_POINTS,\n  TIMESTAMPS,\n  TRANSFORMATIONS,\n  LINE_TO,\n  MOVE_TO\n} from '../constants'\nimport { State } from '../reducers'\nimport { Args, Coordinate, Instruction } from '../types'\nimport { GRAY } from '../styling'\n\ntype Props = {\n  erase: boolean\n  index: number\n  height: number\n  width: number\n  margin: number\n  mousePosition: Coordinate | undefined\n  originalMousePosition: Coordinate | undefined\n  scalingFactor: number\n} & ConnectedProps<typeof connector>\n\nconst CONJOINED = \"conjoined\"\n\nconst Base: React.FC<Props> = ({\n  canvas,\n  transformation,\n  erase,\n  index,\n  height,\n  width,\n  margin,\n  mousePosition,\n  originalMousePosition,\n  scalingFactor,\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  // const [variation, setVariation] = useState()\n  // const delay = useSelector(() =>configuration[DELAY]) * 100\n  const points = useSelector(() => canvas[POINTS])\n  // const timestamps = useSelector(() =>canvas[TIMESTAMPS])\n  const transformations = useSelector(() => transformation[TRANSFORMATIONS])\n  // const numPoints = points.length\n  // const numSegments = useSelector(() =>configuration[NUM_SEGMENTS])\n\n  useEffect(() => {\n    eraseCanvas(canvasRef)\n  }, [erase])\n\n  const drawLine = () => {\n\n    if (!canvasRef || !canvasRef.current)\n      return\n\n    const canvas: HTMLCanvasElement = canvasRef.current\n    const context = canvas.getContext('2d')\n\n    if (!!context) {\n\n      Object.assign(context, {\n        lineJoin: 'round',\n        lineWidth: 0.1,\n        strokeStyle: \"rgba(0, 0, 0, 0.7)\"\n      })\n\n      const pointArray = transformations.reduce<Instruction[]>((acc, type) => {\n        acc = type.transformation({\n          args: {\n            points: acc.length > 0 ? acc : points,\n            index_distance: 2 * (index + 1),\n            distance: 30,\n            scale_x: (index * 0.1) + 1,\n            scale_y: (index * 0.3) + 1\n          }\n        })\n\n        return acc\n      }, [])\n\n      pointArray.filter(point => point).map((point, index) => {\n        const x = point.x / scalingFactor\n        const y = point.y / scalingFactor\n\n        switch (point.type) {\n          case MOVE_TO:\n            context.beginPath()\n            context.moveTo(x, y)\n            break\n          case ARC:\n            if (!!point.radius) {\n              context.arc(x, y, point.radius, 0, 2 * Math.PI)\n              context.closePath()\n              context.stroke()\n            }\n            break\n          default:\n            context.lineTo(x, y)\n            context.closePath()\n            context.stroke()\n            break\n\n        }\n      })\n\n      context.closePath()\n    }\n  }\n\n  useEffect(() => {\n    setTimeout(() => {\n\n      drawLine()\n    }, index * 50)\n  }, [originalMousePosition])\n\n  return <canvas\n    height={height}\n    width={width}\n    ref={canvasRef}\n    style={{\n      border: `1px solid ${GRAY}`,\n      marginRight: `${margin}px`,\n      borderRadius: \"3px\",\n    }}\n  />\n}\n\nconst mapState = (state: State) => state\n\nconst mapDispatch = {}\n\nconst connector = connect(mapState, mapDispatch)\n\nexport const Segment = connector(Base)","import React, {\n  useEffect,\n  useRef\n} from 'react'\nimport { connect, ConnectedProps, useSelector } from 'react-redux'\nimport { eraseCanvas } from './Sketch'\nimport { DELAY, NUM_LINES } from '../constants'\nimport { Coordinate } from '../types'\nimport { GRAY } from '../styling'\nimport { State } from '../reducers'\n\ntype Props = {\n  erase: boolean\n  index: number\n  height: number\n  width: number\n  margin: number\n  mousePosition: Coordinate | undefined\n  originalMousePosition: Coordinate | undefined\n  scalingFactor: number\n} & ConnectedProps<typeof connector>\n\ntype DrawParameters = {\n  index: number\n  idx: number\n}\n\nconst Base: React.FC<Props> = ({\n  configuration,\n  erase,\n  index,\n  height,\n  width,\n  margin,\n  mousePosition,\n  originalMousePosition,\n  scalingFactor\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const lines = useSelector(() => configuration[NUM_LINES])\n  const delay = useSelector(() => configuration[DELAY]) * 100\n\n  useEffect(() => {\n    eraseCanvas(canvasRef)\n  }, [erase])\n\n  useEffect(() => {\n    const drawLine = () => {\n\n      if (!canvasRef || !canvasRef.current)\n        return\n\n      const canvas: HTMLCanvasElement = canvasRef.current\n\n      const context = canvas.getContext('2d')\n\n      if (context) {\n        Object.assign(context, {\n          lineJoin: 'round',\n          lineWidth: 0.1,\n          strokeStyle: 'rgba(0, 0, 0, 0.1)',\n        })\n\n        context.beginPath()\n\n        const draw = ({ index, idx }: DrawParameters) => {\n          if (!!originalMousePosition && !!mousePosition) {\n            const tfx = (coordinate: Coordinate | undefined) => {\n\n              if (!coordinate)\n                return { x: null, y: null }\n\n              const { x: xOriginal, y: yOriginal } = coordinate\n\n              const x = xOriginal + idx * 10 * Math.pow(-1, idx)\n              const y = yOriginal + index * 20 * Math.sin(yOriginal)\n\n              return {\n                x: (x) / scalingFactor,\n                y: (y) / scalingFactor\n              }\n            }\n\n            const { x: xMoveTo, y: yMoveTo } = tfx(originalMousePosition)\n            const { x: xLineTo, y: yLineTo } = tfx(mousePosition)\n\n            if (!!xMoveTo && !!yMoveTo && !!xLineTo && !!yLineTo) {\n              context.moveTo(xMoveTo, yMoveTo)\n              context.lineTo(xLineTo, yLineTo)\n              context.closePath()\n              context.stroke()\n            }\n          }\n        }\n\n        [...Array(lines)].forEach((_, idx) => {\n          const params = { index, idx }\n          setTimeout(() => {\n            delay !== 0\n              ? setTimeout(() => { draw(params) }, delay * index)\n              : draw(params)\n          }, idx * 1000)\n        })\n      }\n    }\n\n    drawLine()\n  }, [originalMousePosition])\n\n\n  return <canvas\n    height={height}\n    width={width}\n    ref={canvasRef}\n    style={{\n      border: `1px solid ${GRAY}`,\n      marginRight: `${margin}px`,\n      borderRadius: \"3px\",\n    }}\n  />\n}\n\nconst mapState = (state: State) => state\n\nconst mapDispatch = {}\n\nconst connector = connect(mapState, mapDispatch)\n\nexport const SketchChild = connector(Base)","import React from 'react';\nimport { connect } from 'react-redux'\nimport { Formik } from 'formik'\n// import { ChromePicker } from 'react-color'\n\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport {\n  faAngleDown,\n  faAngleUp,\n  faArrowLeft,\n  faArrowRight,\n  faArrowsAlt,\n  faCircle,\n  faEllipsisH,\n  faExpandAlt,\n  faRedo,\n  faSlash,\n  faSquare,\n  faTimes\n} from '@fortawesome/free-solid-svg-icons'\n\nimport './App.css';\nimport 'react-slidedown/lib/slidedown.css'\nimport 'react-sliding-pane/dist/react-sliding-pane.css';\n\nimport {\n  Box,\n  Heading,\n} from 'rebass'\n\nimport {\n  Sketch\n} from './components'\nimport { defaultFontProps } from './styling'\n\nlibrary.add(\n  faAngleDown,\n  faAngleUp,\n  faArrowLeft,\n  faArrowRight,\n  faArrowsAlt,\n  faCircle,\n  faEllipsisH,\n  faExpandAlt,\n  faRedo,\n  faSlash,\n  faSquare,\n  faTimes\n)\n\nconst App: React.FC = () =>\n  <Box px={3} width=\"100%\">\n    <Heading\n      mb={3}\n      {...defaultFontProps}\n      fontSize={4}\n      letterSpacing=\"0.1em\"\n      textAlign=\"center\"\n    >DRAWING TESTS</Heading>\n\n    <Sketch\n      height={600}\n      width={600}\n    />\n  </Box >\n\nexport default connect()(App)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport configureStore from './store'\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <App />\n  </Provider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}